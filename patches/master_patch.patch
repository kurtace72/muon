diff --git a/base/threading/thread_restrictions.h b/base/threading/thread_restrictions.h
index e9f801778ea0edf81a316d7eeb0a9c436c3cadcd..9a84622797d063d206c3eb25d09e09bb55f496ea 100644
--- a/base/threading/thread_restrictions.h
+++ b/base/threading/thread_restrictions.h
@@ -31,6 +31,13 @@ class StatisticsProviderImpl;
 namespace chrome_browser_net {
 class Predictor;
 }
+
+namespace atom {
+namespace api {
+  class Session;
+}
+}
+
 namespace content {
 class BrowserGpuChannelHostFactory;
 class BrowserGpuMemoryBufferManager;
@@ -216,6 +223,9 @@ class BASE_EXPORT ThreadRestrictions {
   friend class ui::CommandBufferLocal;
   friend class ui::GpuState;
 
+  // BB: MUON ones that maybe need to be fixed???
+  friend class atom::api::Session;
+
   // END ALLOWED USAGE.
   // BEGIN USAGE THAT NEEDS TO BE FIXED.
   friend class ::chromeos::BlockingMethodCaller;  // http://crbug.com/125360
diff --git a/build/config/BUILDCONFIG.gn b/build/config/BUILDCONFIG.gn
index fa4ec72c87c2ffe25353ab9e750cc2fd63c934e4..fa31891e545d9c8578ed2f052223789139b64e55 100644
--- a/build/config/BUILDCONFIG.gn
+++ b/build/config/BUILDCONFIG.gn
@@ -150,6 +150,8 @@ declare_args() {
   host_toolchain = ""
 
   # DON'T ADD MORE FLAGS HERE. Read the comment above.
+  # Build chromium without muon flags
+  muon_chromium_build = false
 }
 
 declare_args() {
@@ -521,6 +523,15 @@ default_compiler_configs = [
   "//build/config/compiler:runtime_library",
   "//build/config/sanitizers:default_sanitizer_flags",
 ]
+
+if (!muon_chromium_build) {
+  default_compiler_configs -= [ "//build/config/compiler:default_include_dirs" ]
+  default_compiler_configs += [
+    "//electron/build:muon_include_dirs",
+    "//build/config/compiler:default_include_dirs"
+  ]
+}
+
 if (is_win) {
   default_compiler_configs += [
     "//build/config/win:default_crt",
diff --git a/build/config/chrome_build.gni b/build/config/chrome_build.gni
index c649018a7a0aeb20caeb2bf37c60d57c48630f1b..b4bff28a0cca5273121f8393ed206c7745dd7cb6 100644
--- a/build/config/chrome_build.gni
+++ b/build/config/chrome_build.gni
@@ -12,7 +12,7 @@ declare_args() {
   # on Windows.
   is_multi_dll_chrome = is_win && !is_component_build
 }
-
+declare_args() {
 # Refers to the subdirectory for branding in various places including
 # chrome/app/theme.
 if (is_chrome_branded) {
@@ -20,3 +20,4 @@ if (is_chrome_branded) {
 } else {
   branding_path_component = "chromium"
 }
+}
diff --git a/build/toolchain/mac/BUILD.gn b/build/toolchain/mac/BUILD.gn
index b417e76a3b0b9d985f1442503b7b9fd93d6f2e0f..235a6bfcfbaaf80f53fe9db10ef2a5738bc8a174 100644
--- a/build/toolchain/mac/BUILD.gn
+++ b/build/toolchain/mac/BUILD.gn
@@ -245,13 +245,15 @@ template("mac_toolchain") {
     }
 
     tool("alink") {
+      rspfile = "{{output}}.rsp"
       script =
           rebase_path("//build/toolchain/mac/filter_libtool.py", root_build_dir)
-      command = "$env_wrapper rm -f {{output}} && TOOL_VERSION=${tool_versions.filter_libtool} python $script libtool -static {{arflags}} -o {{output}} {{inputs}}"
+      command = "$env_wrapper rm -f {{output}} && TOOL_VERSION=${tool_versions.filter_libtool} python $script libtool -static {{arflags}} -o {{output}} -filelist \"$rspfile\""
       description = "LIBTOOL-STATIC {{output}}"
       outputs = [
         "{{output_dir}}/{{target_output_name}}{{output_extension}}",
       ]
+      rspfile_content = "{{inputs_newline}}"
       default_output_dir = "{{target_out_dir}}"
       default_output_extension = ".a"
       output_prefix = "lib"
diff --git a/build/toolchain/win/BUILD.gn b/build/toolchain/win/BUILD.gn
index 296f829cbb3080a60e7c059c9947c85201550c6c..a691cd481eb3a9bce1a8750a860226a1f899b24e 100644
--- a/build/toolchain/win/BUILD.gn
+++ b/build/toolchain/win/BUILD.gn
@@ -6,6 +6,7 @@ import("//build/config/clang/clang.gni")
 import("//build/config/compiler/compiler.gni")
 import("//build/config/sanitizers/sanitizers.gni")
 import("//build/config/win/visual_studio_version.gni")
+import("//build/toolchain/cc_wrapper.gni")
 import("//build/toolchain/clang_static_analyzer.gni")
 import("//build/toolchain/goma.gni")
 import("//build/toolchain/toolchain.gni")
@@ -24,6 +25,8 @@ tool_wrapper_path = rebase_path("tool_wrapper.py", root_build_dir)
 
 if (use_goma) {
   goma_prefix = "$goma_dir/gomacc.exe "
+} else if (cc_wrapper != "") {
+  goma_prefix = "$cc_wrapper "
 } else {
   goma_prefix = ""
 }
diff --git a/chrome/BUILD.gn b/chrome/BUILD.gn
index 070d7c6008b1df85486014c538bc6e98b6771220..c26cad1e37ea14fabab1ff39c348cf1fd54d49e8 100644
--- a/chrome/BUILD.gn
+++ b/chrome/BUILD.gn
@@ -33,6 +33,11 @@ if (is_android) {
   import("//build/util/version.gni")
   import("//media/cdm/ppapi/cdm_paths.gni")
   import("//third_party/icu/config.gni")
+  if (!muon_chromium_build) {
+    # Avoid mac app/framework naming conflicts
+    chrome_product_full_name = "Google Chrome"
+    chrome_product_short_name = "Google Chrome"
+  }
 }
 
 assert(!is_ios, "Chromium/iOS shouldn't use anything in //chrome")
diff --git a/chrome/browser/chrome_content_browser_manifest_overlay.json b/chrome/browser/chrome_content_browser_manifest_overlay.json
index f03b03a8d44239fa2831c4d797c5a64b81efe7a8..8094b885eef4e9adfe5c72f19329abe4e73e95ab 100644
--- a/chrome/browser/chrome_content_browser_manifest_overlay.json
+++ b/chrome/browser/chrome_content_browser_manifest_overlay.json
@@ -12,7 +12,7 @@
           "extensions::StashService",
           "metrics::mojom::LeakDetector",
           "mojom::ModuleEventSink",
-          "rappor::mojom::RapporRecorder",
+          // "rappor::mojom::RapporRecorder",
           "startup_metric_utils::mojom::StartupMetricHost",
           "translate::mojom::ContentTranslateDriver"
         ],
diff --git a/chrome/browser/extensions/api/messaging/message_service.cc b/chrome/browser/extensions/api/messaging/message_service.cc
index 801f3b6f7a52b8a693e14222ee87510defbfa38c..9a777a7830b83e055aeeb004f11cd672a37da6e1 100644
--- a/chrome/browser/extensions/api/messaging/message_service.cc
+++ b/chrome/browser/extensions/api/messaging/message_service.cc
@@ -170,6 +170,11 @@ namespace {
 static content::RenderProcessHost* GetExtensionProcess(
     BrowserContext* context,
     const std::string& extension_id) {
+  auto original = ExtensionsBrowserClient::Get()->GetOriginalContext(context);
+  // Always use the original context for non-private child contexts
+  if (!context->IsOffTheRecord()) {
+    context = original;
+  }
   scoped_refptr<SiteInstance> site_instance =
       ProcessManager::Get(context)->GetSiteInstanceForURL(
           Extension::GetBaseURLFromExtensionId(extension_id));
diff --git a/chrome/browser/importer/external_process_importer_client.h b/chrome/browser/importer/external_process_importer_client.h
index edf5cc054ac3c703cc049509aed223313a875001..6c5f76eb7f8082afa02f6d0721efa3dc09a996d5 100644
--- a/chrome/browser/importer/external_process_importer_client.h
+++ b/chrome/browser/importer/external_process_importer_client.h
@@ -97,6 +97,8 @@ class ExternalProcessImporterClient
   void OnAutofillFormDataImportGroup(
       const std::vector<ImporterAutofillFormDataEntry>&
           autofill_form_data_entry_group) override;
+  void OnCookiesImportStart(uint32_t total_cookies_count) override {};
+  void OnCookiesImportGroup(const std::vector<ImportedCookieEntry>& cookies_group) override {};
   void OnIE7PasswordReceived(
       const importer::ImporterIE7PasswordInfo& importer_password_info) override;
 
diff --git a/chrome/browser/importer/external_process_importer_host.h b/chrome/browser/importer/external_process_importer_host.h
index 08c6f28746cc5f345114a942834db18f5c7a1d41..3a43ae76f054ba449e3b892ea752c62fdad2e5a3 100644
--- a/chrome/browser/importer/external_process_importer_host.h
+++ b/chrome/browser/importer/external_process_importer_host.h
@@ -74,7 +74,10 @@ class ExternalProcessImporterHost
 
  private:
   // ExternalProcessImporterHost deletes itself in OnImportEnded().
+ protected:
   ~ExternalProcessImporterHost() override;
+ private:
+  friend class BraveExternalProcessImporterHost;
 
   // Launches the utility process that starts the import task, unless bookmark
   // or template model are not yet loaded. If load is not detected, this method
diff --git a/chrome/browser/importer/in_process_importer_bridge.h b/chrome/browser/importer/in_process_importer_bridge.h
index 247d24220beb7d176b890d7c2d45bdd2dfd8db99..c270bba0fabb557e8d3d1df8ac166bbb00ed6e8b 100644
--- a/chrome/browser/importer/in_process_importer_bridge.h
+++ b/chrome/browser/importer/in_process_importer_bridge.h
@@ -68,7 +68,9 @@ class InProcessImporterBridge : public ImporterBridge {
   // End ImporterBridge implementation.
 
  private:
+ protected:
   ~InProcessImporterBridge() override;
+ private:
 
   ProfileWriter* const writer_;  // weak
   const base::WeakPtr<ExternalProcessImporterHost> host_;
diff --git a/chrome/browser/memory/tab_manager.cc b/chrome/browser/memory/tab_manager.cc
index 0d161da8de6e11d4e46b076eff610b9943aa9103..8f5cc980d3800511fc8042071a71203b936958b2 100644
--- a/chrome/browser/memory/tab_manager.cc
+++ b/chrome/browser/memory/tab_manager.cc
@@ -603,7 +603,8 @@ void TabManager::AddTabStats(const TabStripModel* model,
                              TabStatsList* stats_list) const {
   for (int i = 0; i < model->count(); i++) {
     WebContents* contents = model->GetWebContentsAt(i);
-    if (!contents->IsCrashed()) {
+    // TODO(bridiver) - temporary workaround for pinned and unloaded tabs
+    if (contents && !contents->IsCrashed()) {
       TabStats stats;
       stats.is_app = is_app;
       stats.is_internal_page = IsInternalPage(contents->GetLastCommittedURL());
@@ -693,6 +694,17 @@ void TabManager::PurgeBackgroundedTabsIfNeeded() {
   }
 }
 
+// MUON(bridiver): see tab_manager.h
+WebContents* TabManager::CreateNullContents(
+    TabStripModel* model, WebContents* old_contents) {
+  return WebContents::Create(WebContents::CreateParams(model->profile()));
+}
+
+// MUON(bridiver): see tab_manager.h
+void TabManager::DestroyOldContents(WebContents* old_contents) {
+  delete old_contents;
+}
+
 WebContents* TabManager::DiscardWebContentsAt(int index, TabStripModel* model) {
   // Can't discard active index.
   if (model->active_index() == index)
@@ -712,8 +724,8 @@ WebContents* TabManager::DiscardWebContentsAt(int index, TabStripModel* model) {
       "TabManager.Discarding.DiscardedTabHasBeforeUnloadHandler",
       old_contents->NeedToFireBeforeUnload());
 
-  WebContents* null_contents =
-      WebContents::Create(WebContents::CreateParams(model->profile()));
+  // MUON(bridiver): see tab_manager.h
+  WebContents* null_contents = CreateNullContents(model, old_contents);
   // Copy over the state from the navigation controller to preserve the
   // back/forward history and to continue to display the correct title/favicon.
   null_contents->GetController().CopyStateFrom(old_contents->GetController());
@@ -736,7 +748,8 @@ WebContents* TabManager::DiscardWebContentsAt(int index, TabStripModel* model) {
   // TODO(jamescook): This breaks script connections with other tabs.
   // Find a different approach that doesn't do that, perhaps based on navigation
   // to swappedout://.
-  delete old_contents;
+  // MUON(bridiver): see tab_manager.h
+  DestroyOldContents(old_contents);
   recent_tab_discard_ = true;
 
   return null_contents;
diff --git a/chrome/browser/memory/tab_manager.h b/chrome/browser/memory/tab_manager.h
index 23c5c5fb3bf681e048440775f657da77e83efcea..759fc6ab99036f7f1f8c761f448823536c617e03 100644
--- a/chrome/browser/memory/tab_manager.h
+++ b/chrome/browser/memory/tab_manager.h
@@ -70,6 +70,11 @@ class TabManager : public TabStripModelObserver {
   TabManager();
   ~TabManager() override;
 
+  // MUON(bridiver): override to create/destroy guests webcontents
+  virtual content::WebContents* CreateNullContents(
+      TabStripModel* model, content::WebContents* old_contents);
+  virtual void DestroyOldContents(content::WebContents* old_contents);
+
   // Number of discard events since Chrome started.
   int discard_count() const { return discard_count_; }
 
@@ -187,6 +192,7 @@ class TabManager : public TabStripModelObserver {
   // This is needed so WebContentsData can call OnDiscardedStateChange, and
   // can use PurgeState.
   friend class WebContentsData;
+  friend class GuestTabManager;
 
   // Finds TabStripModel which has a WebContents whose id is the given
   // web_contents_id, and returns the WebContents index and the TabStripModel.
diff --git a/chrome/browser/printing/print_view_manager_base.cc b/chrome/browser/printing/print_view_manager_base.cc
index d7f5ec811dd78f5a04b62d0e1f55d1a3a2108a97..4ebf27b41e426b91b88e6607ee976be53f87866f 100644
--- a/chrome/browser/printing/print_view_manager_base.cc
+++ b/chrome/browser/printing/print_view_manager_base.cc
@@ -59,13 +59,13 @@ namespace {
 
 void ShowWarningMessageBox(const base::string16& message) {
   // Runs always on the UI thread.
-  static bool is_dialog_shown = false;
-  if (is_dialog_shown)
-    return;
+  // static bool is_dialog_shown = false;
+  // if (is_dialog_shown)
+  //   return;
   // Block opening dialog from nested task.
-  base::AutoReset<bool> auto_reset(&is_dialog_shown, true);
+  // base::AutoReset<bool> auto_reset(&is_dialog_shown, true);
 
-  chrome::ShowWarningMessageBox(nullptr, base::string16(), message);
+  // chrome::ShowWarningMessageBox(nullptr, base::string16(), message);
 }
 
 }  // namespace
diff --git a/chrome/browser/renderer_host/chrome_extension_message_filter.cc b/chrome/browser/renderer_host/chrome_extension_message_filter.cc
index 3a9161c8555bdd96ac3026238b87c2e050991779..1dcec4d60ee7eeb84a76560c1b62f47c60789ba3 100644
--- a/chrome/browser/renderer_host/chrome_extension_message_filter.cc
+++ b/chrome/browser/renderer_host/chrome_extension_message_filter.cc
@@ -16,10 +16,12 @@
 #include "base/task_scheduler/post_task.h"
 #include "chrome/browser/browser_process.h"
 #include "chrome/browser/chrome_notification_types.h"
+#if 0
 #include "chrome/browser/extensions/activity_log/activity_action_constants.h"
 #include "chrome/browser/extensions/activity_log/activity_actions.h"
 #include "chrome/browser/extensions/activity_log/activity_log.h"
 #include "chrome/browser/extensions/api/activity_log_private/activity_log_private_api.h"
+#endif  // 0
 #include "chrome/browser/extensions/api/messaging/message_service.h"
 #include "chrome/browser/profiles/profile.h"
 #include "chrome/browser/profiles/profile_manager.h"
@@ -27,6 +29,7 @@
 #include "content/public/browser/notification_service.h"
 #include "content/public/browser/render_process_host.h"
 #include "extensions/browser/extension_system.h"
+#include "extensions/browser/info_map.h"
 #include "extensions/common/api/messaging/message.h"
 #include "extensions/common/extension_messages.h"
 #include "extensions/common/extension_set.h"
@@ -43,6 +46,7 @@ const uint32_t kFilteredMessageClasses[] = {
     ChromeExtensionMsgStart, ExtensionMsgStart,
 };
 
+#if 0
 // Logs an action to the extension activity log for the specified profile.
 void AddActionToExtensionActivityLog(Profile* profile,
                                      extensions::ActivityLog* activity_log,
@@ -55,6 +59,7 @@ void AddActionToExtensionActivityLog(Profile* profile,
     action->set_page_incognito(profile->IsOffTheRecord());
   activity_log->LogAction(action);
 }
+#endif  // 0
 
 }  // namespace
 
@@ -65,7 +70,7 @@ ChromeExtensionMessageFilter::ChromeExtensionMessageFilter(
                            arraysize(kFilteredMessageClasses)),
       render_process_id_(render_process_id),
       profile_(profile),
-      activity_log_(extensions::ActivityLog::GetInstance(profile)),
+      // activity_log_(extensions::ActivityLog::GetInstance(profile)),
       extension_info_map_(
           extensions::ExtensionSystem::Get(profile)->info_map()) {
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
@@ -92,12 +97,14 @@ bool ChromeExtensionMessageFilter::OnMessageReceived(
     IPC_MESSAGE_HANDLER(ExtensionHostMsg_PostMessage, OnPostMessage)
     IPC_MESSAGE_HANDLER_DELAY_REPLY(ExtensionHostMsg_GetMessageBundle,
                                     OnGetExtMessageBundle)
+#if 0
     IPC_MESSAGE_HANDLER(ExtensionHostMsg_AddAPIActionToActivityLog,
                         OnAddAPIActionToExtensionActivityLog);
     IPC_MESSAGE_HANDLER(ExtensionHostMsg_AddDOMActionToActivityLog,
                         OnAddDOMActionToExtensionActivityLog);
     IPC_MESSAGE_HANDLER(ExtensionHostMsg_AddEventToActivityLog,
                         OnAddEventToExtensionActivityLog);
+#endif  // 0
     IPC_MESSAGE_UNHANDLED(handled = false)
   IPC_END_MESSAGE_MAP()
 
@@ -113,9 +120,11 @@ void ChromeExtensionMessageFilter::OverrideThreadForMessage(
     case ExtensionHostMsg_OpenMessagePort::ID:
     case ExtensionHostMsg_CloseMessagePort::ID:
     case ExtensionHostMsg_PostMessage::ID:
+#if 0
     case ExtensionHostMsg_AddAPIActionToActivityLog::ID:
     case ExtensionHostMsg_AddDOMActionToActivityLog::ID:
     case ExtensionHostMsg_AddEventToActivityLog::ID:
+#endif  // 0
       *thread = BrowserThread::UI;
       break;
     default:
@@ -266,6 +275,7 @@ void ChromeExtensionMessageFilter::OnGetExtMessageBundleAsync(
   Send(reply_msg);
 }
 
+#if 0
 void ChromeExtensionMessageFilter::OnAddAPIActionToExtensionActivityLog(
     const std::string& extension_id,
     const ExtensionHostMsg_APIActionOrEvent_Params& params) {
@@ -316,6 +326,7 @@ void ChromeExtensionMessageFilter::OnAddEventToExtensionActivityLog(
   }
   AddActionToExtensionActivityLog(profile_, activity_log_, action);
 }
+#endif  // 0
 
 void ChromeExtensionMessageFilter::Observe(
     int type,
@@ -323,7 +334,7 @@ void ChromeExtensionMessageFilter::Observe(
     const content::NotificationDetails& details) {
   DCHECK_EQ(chrome::NOTIFICATION_PROFILE_DESTROYED, type);
   profile_ = NULL;
-  activity_log_ = nullptr;
+  // activity_log_ = nullptr;
 }
 
 bool ChromeExtensionMessageFilter::ShouldLogExtensionAction(
@@ -332,7 +343,8 @@ bool ChromeExtensionMessageFilter::ShouldLogExtensionAction(
   // conditions (e.g. logging gets disabled but the renderer sends the message
   // before it gets updated), we still need this check here.
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
-  return profile_ &&
-         g_browser_process->profile_manager()->IsValidProfile(profile_) &&
-         activity_log_ && activity_log_->ShouldLog(extension_id);
+  // return profile_ &&
+  //        g_browser_process->profile_manager()->IsValidProfile(profile_) &&
+  //        activity_log_ && activity_log_->ShouldLog(extension_id);
+  return false;
 }
diff --git a/chrome/browser/renderer_host/chrome_extension_message_filter.h b/chrome/browser/renderer_host/chrome_extension_message_filter.h
index 55568bd69be22628210cf5c1b61cc28b0c7187ac..32d3080cc9107c6a5131477141c0de46368965d3 100644
--- a/chrome/browser/renderer_host/chrome_extension_message_filter.h
+++ b/chrome/browser/renderer_host/chrome_extension_message_filter.h
@@ -76,6 +76,7 @@ class ChromeExtensionMessageFilter : public content::BrowserMessageFilter,
       const std::string& main_extension_id,
       const std::string& default_locale,
       IPC::Message* reply_msg);
+#if 0
   void OnAddAPIActionToExtensionActivityLog(
       const std::string& extension_id,
       const ExtensionHostMsg_APIActionOrEvent_Params& params);
@@ -88,6 +89,7 @@ class ChromeExtensionMessageFilter : public content::BrowserMessageFilter,
   void OnAddEventToExtensionActivityLog(
       const std::string& extension_id,
       const ExtensionHostMsg_APIActionOrEvent_Params& params);
+#endif  // 0
 
   // content::NotificationObserver implementation.
   void Observe(int type,
diff --git a/chrome/browser/renderer_host/pepper/chrome_browser_pepper_host_factory.cc b/chrome/browser/renderer_host/pepper/chrome_browser_pepper_host_factory.cc
index 0da4a534c0adae8b0edd2ffeace9972ce3e63c6c..0d1f9efcb260f8c943ab24a4c23c14dbc23863b8 100644
--- a/chrome/browser/renderer_host/pepper/chrome_browser_pepper_host_factory.cc
+++ b/chrome/browser/renderer_host/pepper/chrome_browser_pepper_host_factory.cc
@@ -58,13 +58,13 @@ ChromeBrowserPepperHostFactory::CreateResourceHost(
         return std::unique_ptr<ResourceHost>(new MessageFilterHost(
             host_->GetPpapiHost(), instance, resource, pv_filter));
       }
-      case PpapiHostMsg_OutputProtection_Create::ID: {
-        scoped_refptr<ResourceMessageFilter> output_protection_filter(
-            new chrome::PepperOutputProtectionMessageFilter(host_, instance));
-        return std::unique_ptr<ResourceHost>(
-            new MessageFilterHost(host_->GetPpapiHost(), instance, resource,
-                                  output_protection_filter));
-      }
+      // case PpapiHostMsg_OutputProtection_Create::ID: {
+      //   scoped_refptr<ResourceMessageFilter> output_protection_filter(
+      //       new chrome::PepperOutputProtectionMessageFilter(host_, instance));
+      //   return std::unique_ptr<ResourceHost>(
+      //       new MessageFilterHost(host_->GetPpapiHost(), instance, resource,
+      //                             output_protection_filter));
+      // }
     }
   }
 
diff --git a/chrome/common/BUILD.gn b/chrome/common/BUILD.gn
index 7f659bdcdccbce1044e3ee2f2d9295cdce20b02d..b22a1518d28b641ff358d00013536f6852572186 100644
--- a/chrome/common/BUILD.gn
+++ b/chrome/common/BUILD.gn
@@ -552,6 +552,12 @@ static_library("common") {
     ]
     public_deps += [ "//chrome/common:version_header" ]
   }
+
+  if (!muon_chromium_build && enable_extensions) {
+    sources -= [
+      "extensions/chrome_extensions_client.cc",
+    ]
+  }
 }
 
 process_version("version_header") {
diff --git a/chrome/common/chrome_constants.cc b/chrome/common/chrome_constants.cc
index 94cdc2aeb7398a433b9afcfbbcfa87dd1e57b65d..9263f1283ffe964eec8a479f7a1b7de6b5162863 100644
--- a/chrome/common/chrome_constants.cc
+++ b/chrome/common/chrome_constants.cc
@@ -10,11 +10,11 @@
 #define FPL FILE_PATH_LITERAL
 
 #if defined(OS_MACOSX)
-#define CHROMIUM_PRODUCT_STRING "Chromium"
+#define CHROMIUM_PRODUCT_STRING PRODUCT_SHORTNAME_STRING
 #if defined(GOOGLE_CHROME_BUILD)
-#define PRODUCT_STRING "Google Chrome"
+#define PRODUCT_STRING PRODUCT_SHORTNAME_STRING
 #elif defined(CHROMIUM_BUILD)
-#define PRODUCT_STRING "Chromium"
+#define PRODUCT_STRING PRODUCT_SHORTNAME_STRING
 #else
 #error Unknown branding
 #endif
@@ -43,13 +43,13 @@ const char kChromeVersion[] = CHROME_VERSION_STRING;
 
 #if defined(OS_WIN)
 const base::FilePath::CharType kBrowserProcessExecutableNameChromium[] =
-    FPL("chrome.exe");
+    FPL("brave.exe");
 const base::FilePath::CharType kBrowserProcessExecutableName[] =
-    FPL("chrome.exe");
+    FPL("brave.exe");
 const base::FilePath::CharType kHelperProcessExecutableNameChromium[] =
-    FPL("chrome.exe");
+    FPL("brave.exe");
 const base::FilePath::CharType kHelperProcessExecutableName[] =
-    FPL("chrome.exe");
+    FPL("brave.exe");
 #elif defined(OS_MACOSX)
 const base::FilePath::CharType kBrowserProcessExecutableNameChromium[] =
     FPL(CHROMIUM_PRODUCT_STRING);
@@ -61,7 +61,7 @@ const base::FilePath::CharType kHelperProcessExecutableName[] =
     FPL(PRODUCT_STRING " Helper");
 #elif defined(OS_ANDROID)
 // NOTE: Keep it synced with the process names defined in AndroidManifest.xml.
-const base::FilePath::CharType kBrowserProcessExecutableName[] = FPL("chrome");
+const base::FilePath::CharType kBrowserProcessExecutableName[] = FPL(EXECUTABLE_NAME);
 const base::FilePath::CharType kBrowserProcessExecutableNameChromium[] =
     FPL("");
 const base::FilePath::CharType kHelperProcessExecutableName[] =
@@ -69,8 +69,8 @@ const base::FilePath::CharType kHelperProcessExecutableName[] =
 const base::FilePath::CharType kHelperProcessExecutableNameChromium[] = FPL("");
 #elif defined(OS_POSIX)
 const base::FilePath::CharType kBrowserProcessExecutableNameChromium[] =
-    FPL("chrome");
-const base::FilePath::CharType kBrowserProcessExecutableName[] = FPL("chrome");
+    FPL(EXECUTABLE_NAME);
+const base::FilePath::CharType kBrowserProcessExecutableName[] = FPL(EXECUTABLE_NAME);
 // Helper processes end up with a name of "exe" due to execing via
 // /proc/self/exe.  See bug 22703.
 const base::FilePath::CharType kHelperProcessExecutableNameChromium[] =
@@ -80,13 +80,13 @@ const base::FilePath::CharType kHelperProcessExecutableName[] = FPL("exe");
 
 #if defined(OS_WIN)
 const base::FilePath::CharType kBrowserProcessExecutablePathChromium[] =
-    FPL("chrome.exe");
+    FPL("brave.exe");
 const base::FilePath::CharType kBrowserProcessExecutablePath[] =
-    FPL("chrome.exe");
+    FPL("brave.exe");
 const base::FilePath::CharType kHelperProcessExecutablePathChromium[] =
-    FPL("chrome.exe");
+    FPL("brave.exe");
 const base::FilePath::CharType kHelperProcessExecutablePath[] =
-    FPL("chrome.exe");
+    FPL("brave.exe");
 #elif defined(OS_MACOSX)
 const base::FilePath::CharType kBrowserProcessExecutablePathChromium[] =
     FPL(CHROMIUM_PRODUCT_STRING ".app/Contents/MacOS/" CHROMIUM_PRODUCT_STRING);
@@ -98,19 +98,19 @@ const base::FilePath::CharType kHelperProcessExecutablePathChromium[] =
 const base::FilePath::CharType kHelperProcessExecutablePath[] =
     FPL(PRODUCT_STRING " Helper.app/Contents/MacOS/" PRODUCT_STRING " Helper");
 #elif defined(OS_ANDROID)
-const base::FilePath::CharType kBrowserProcessExecutablePath[] = FPL("chrome");
-const base::FilePath::CharType kHelperProcessExecutablePath[] = FPL("chrome");
+const base::FilePath::CharType kBrowserProcessExecutablePath[] = FPL(EXECUTABLE_NAME);
+const base::FilePath::CharType kHelperProcessExecutablePath[] = FPL(EXECUTABLE_NAME);
 const base::FilePath::CharType kBrowserProcessExecutablePathChromium[] =
-    FPL("chrome");
+    FPL(EXECUTABLE_NAME);
 const base::FilePath::CharType kHelperProcessExecutablePathChromium[] =
-    FPL("chrome");
+    FPL(EXECUTABLE_NAME);
 #elif defined(OS_POSIX)
 const base::FilePath::CharType kBrowserProcessExecutablePathChromium[] =
-    FPL("chrome");
-const base::FilePath::CharType kBrowserProcessExecutablePath[] = FPL("chrome");
+    FPL(EXECUTABLE_NAME);
+const base::FilePath::CharType kBrowserProcessExecutablePath[] = FPL(EXECUTABLE_NAME);
 const base::FilePath::CharType kHelperProcessExecutablePathChromium[] =
-    FPL("chrome");
-const base::FilePath::CharType kHelperProcessExecutablePath[] = FPL("chrome");
+    FPL(EXECUTABLE_NAME);
+const base::FilePath::CharType kHelperProcessExecutablePath[] = FPL(EXECUTABLE_NAME);
 #endif  // OS_*
 
 #if defined(OS_MACOSX)
@@ -121,7 +121,7 @@ const base::FilePath::CharType kFrameworkExecutableName[] =
 #endif  // OS_MACOSX
 
 #if defined(OS_WIN)
-const base::FilePath::CharType kBrowserResourcesDll[] = FPL("chrome.dll");
+const base::FilePath::CharType kBrowserResourcesDll[] = FPL("brave.dll");
 const base::FilePath::CharType kChromeElfDllName[] = FPL("chrome_elf.dll");
 const base::FilePath::CharType kStatusTrayWindowClass[] =
     FPL("Chrome_StatusTrayWindow");
diff --git a/chrome/common/chrome_paths_linux.cc b/chrome/common/chrome_paths_linux.cc
index aa26cc9bbb90e53d727af4f3d55ee6472b766654..15940a09c4dfece70dae3527e1279c7cde8601fa 100644
--- a/chrome/common/chrome_paths_linux.cc
+++ b/chrome/common/chrome_paths_linux.cc
@@ -68,8 +68,10 @@ bool GetDefaultUserDataDirectory(base::FilePath* result) {
                                             kDotConfigDir));
 #if defined(GOOGLE_CHROME_BUILD)
   *result = config_dir.Append("google-chrome");
-#else
+#elif defined(MUON_CHROMIUM_BUILD)
   *result = config_dir.Append("chromium");
+#else
+  *result = config_dir.Append("brave");
 #endif
   return true;
 }
diff --git a/chrome/common/chrome_paths_mac.mm b/chrome/common/chrome_paths_mac.mm
index d0bbbf72ff0e356e424dc280eeb1441c990b5770..8e96ea5706f87ea98ba55fcb583b16a8035fa903 100644
--- a/chrome/common/chrome_paths_mac.mm
+++ b/chrome/common/chrome_paths_mac.mm
@@ -41,7 +41,9 @@ NSBundle* OuterAppBundleInternal() {
 
   // From C.app/Contents/Versions/1.2.3.4, go up three steps to get to C.app.
   base::FilePath versioned_dir = chrome::GetVersionedDirectory();
-  base::FilePath outer_app_dir = versioned_dir.DirName().DirName().DirName();
+  // electron uses Frameworks in place of Versions/1.2.3.4
+  // TODO(bridiver) - change this to match chrome
+  base::FilePath outer_app_dir = versioned_dir.DirName().DirName();
   const char* outer_app_dir_c = outer_app_dir.value().c_str();
   NSString* outer_app_dir_ns = [NSString stringWithUTF8String:outer_app_dir_c];
 
diff --git a/chrome/common/chrome_utility_printing_messages.h b/chrome/common/chrome_utility_printing_messages.h
index f5712a7a5bb8fabf279088631141cad405c8be8d..da8ff4065d721d49c1ca443a5c64c45e9f59ca4d 100644
--- a/chrome/common/chrome_utility_printing_messages.h
+++ b/chrome/common/chrome_utility_printing_messages.h
@@ -26,7 +26,6 @@
 #define IPC_MESSAGE_START ChromeUtilityPrintingMsgStart
 
 // Preview and Cloud Print messages.
-#if BUILDFLAG(ENABLE_PRINT_PREVIEW)
 IPC_ENUM_TRAITS_MAX_VALUE(printing::PdfRenderSettings::Mode,
                           printing::PdfRenderSettings::Mode::LAST)
 
@@ -44,6 +43,7 @@ IPC_STRUCT_TRAITS_BEGIN(printing::PrinterCapsAndDefaults)
   IPC_STRUCT_TRAITS_MEMBER(printer_defaults)
   IPC_STRUCT_TRAITS_MEMBER(defaults_mime_type)
 IPC_STRUCT_TRAITS_END()
+#if BUILDFLAG(ENABLE_PRINT_PREVIEW)
 
 IPC_ENUM_TRAITS_MAX_VALUE(printing::ColorModel, printing::PROCESSCOLORMODEL_RGB)
 
diff --git a/chrome/common/chrome_version.h.in b/chrome/common/chrome_version.h.in
index f0a0bcd0098ec31b18bb00588ad8fd11b439fd6f..888572f87a71e6e8444bd6a302343e453aef4287 100644
--- a/chrome/common/chrome_version.h.in
+++ b/chrome/common/chrome_version.h.in
@@ -22,3 +22,5 @@
 // Changelist Information
 
 #define LASTCHANGE_STRING "@LASTCHANGE@"
+
+#define EXECUTABLE_NAME "@EXECUTABLE_NAME@"
diff --git a/chrome/common/importer/edge_importer_utils_win.cc b/chrome/common/importer/edge_importer_utils_win.cc
index c2abd64b2d7c5166c1fdbaaf782974cb4bcc5e53..eb59bbe098dabd0edd3d9d8e24befe1006e56b8b 100644
--- a/chrome/common/importer/edge_importer_utils_win.cc
+++ b/chrome/common/importer/edge_importer_utils_win.cc
@@ -73,7 +73,9 @@ bool IsEdgeFavoritesLegacyMode() {
   // for its favorites.
   if (key.ReadValueDW(L"FavoritesESEEnabled", &ese_enabled) == ERROR_SUCCESS)
     return !ese_enabled;
-  return true;
+  // return true;
+  // No value to read means not legacy mode
+  return false;
 }
 
 bool EdgeImporterCanImport() {
diff --git a/chrome/common/importer/importer_data_types.h b/chrome/common/importer/importer_data_types.h
index 0fc90c62398a93eb89568ce78c8ded2bc9b232b6..50a7d3c0079b7e9c5bc38a4ae3b25eef6d024169 100644
--- a/chrome/common/importer/importer_data_types.h
+++ b/chrome/common/importer/importer_data_types.h
@@ -83,6 +83,7 @@ enum VisitSource {
   VISIT_SOURCE_FIREFOX_IMPORTED = 1,
   VISIT_SOURCE_IE_IMPORTED = 2,
   VISIT_SOURCE_SAFARI_IMPORTED = 3,
+  VISIT_SOURCE_CHROME_IMPORTED = 4,
 };
 
 }  // namespace importer
diff --git a/chrome/common/importer/importer_type.h b/chrome/common/importer/importer_type.h
index c172f8a5bc534465ff4d063a52f9bb510b7e36af..437026ae26eec5dce80edb73929a0fbce870cc37 100644
--- a/chrome/common/importer/importer_type.h
+++ b/chrome/common/importer/importer_type.h
@@ -19,6 +19,8 @@ enum ImporterType {
   TYPE_IE              = 0,
 #endif
   // Value 1 was the (now deleted) Firefox 2 profile importer.
+  // We use it for chrome profile now.
+  TYPE_CHROME          = 1,
   TYPE_FIREFOX         = 2,
 #if defined(OS_MACOSX)
   TYPE_SAFARI          = 3,
diff --git a/chrome/common/importer/profile_import.mojom b/chrome/common/importer/profile_import.mojom
index f366a941273f0807405743f1365fdaf3a549cddc..35d5a90c778adfa67597866c31a91bc79dad3ab6 100644
--- a/chrome/common/importer/profile_import.mojom
+++ b/chrome/common/importer/profile_import.mojom
@@ -16,6 +16,9 @@ struct ImportedBookmarkEntry;
 struct ImporterAutofillFormDataEntry;
 
 [Native]
+struct ImportedCookieEntry;
+
+[Native]
 struct SearchEngineInfo;
 
 [Native]
@@ -63,6 +66,8 @@ interface ProfileImportObserver {
   OnAutofillFormDataImportStart(uint32 total_autofill_form_data_entry_count);
   OnAutofillFormDataImportGroup(
       array<ImporterAutofillFormDataEntry> autofill_form_data_entry_group);
+  OnCookiesImportStart(uint32 total_cookies_count);
+  OnCookiesImportGroup(array<ImportedCookieEntry> cookies_group);
   // Windows only:
   OnIE7PasswordReceived(ImporterIE7PasswordInfo importer_password_info);
 };
diff --git a/chrome/common/importer/profile_import.typemap b/chrome/common/importer/profile_import.typemap
index 6283f2bf6871a10f710694772b5da0bc9b70c2ad..d5d1de309cb50eb9f8757d32d0eec3b42d08f9c0 100644
--- a/chrome/common/importer/profile_import.typemap
+++ b/chrome/common/importer/profile_import.typemap
@@ -9,6 +9,7 @@ public_headers = [
   "//chrome/common/importer/importer_data_types.h",
   "//chrome/common/importer/importer_url_row.h",
   "//components/favicon_base/favicon_usage_data.h",
+  "//electron/brave/common/importer/imported_cookie_entry.h",
 ]
 traits_headers =
     [ "//chrome/common/importer/profile_import_process_param_traits.h" ]
@@ -26,4 +27,5 @@ type_mappings = [
   "chrome.mojom.SearchEngineInfo=::importer::SearchEngineInfo",
   "chrome.mojom.SourceProfile=::importer::SourceProfile",
   "chrome.mojom.ImportItem=::importer::ImportItem",
+  "chrome.mojom.ImportedCookieEntry=::ImportedCookieEntry",
 ]
diff --git a/chrome/common/importer/profile_import_process_param_traits_macros.h b/chrome/common/importer/profile_import_process_param_traits_macros.h
index eb4b00d6ed6af19c4fc998e81dab735db63484e9..04579f1c6a7f0d102a36a58ca4d9b497dbf28754 100644
--- a/chrome/common/importer/profile_import_process_param_traits_macros.h
+++ b/chrome/common/importer/profile_import_process_param_traits_macros.h
@@ -24,6 +24,7 @@
 #include "components/favicon_base/favicon_usage_data.h"
 #include "content/public/common/common_param_traits.h"
 #include "ipc/ipc_message_macros.h"
+#include "electron/brave/common/importer/imported_cookie_entry.h"
 
 #if defined(OS_WIN)
 IPC_ENUM_TRAITS_MIN_MAX_VALUE(importer::ImporterType,
@@ -92,4 +93,14 @@ IPC_STRUCT_TRAITS_BEGIN(importer::ImporterIE7PasswordInfo)
   IPC_STRUCT_TRAITS_MEMBER(date_created)
 IPC_STRUCT_TRAITS_END()
 
+IPC_STRUCT_TRAITS_BEGIN(ImportedCookieEntry)
+  IPC_STRUCT_TRAITS_MEMBER(domain)
+  IPC_STRUCT_TRAITS_MEMBER(name)
+  IPC_STRUCT_TRAITS_MEMBER(value)
+  IPC_STRUCT_TRAITS_MEMBER(host)
+  IPC_STRUCT_TRAITS_MEMBER(path)
+  IPC_STRUCT_TRAITS_MEMBER(expiry_date)
+  IPC_STRUCT_TRAITS_MEMBER(secure)
+  IPC_STRUCT_TRAITS_MEMBER(httponly)
+IPC_STRUCT_TRAITS_END()
 #endif  // CHROME_COMMON_IMPORTER_PROFILE_IMPORT_PROCESS_PARAM_TRAITS_MACROS_H_
diff --git a/chrome/common/mac/app_mode_chrome_locator.mm b/chrome/common/mac/app_mode_chrome_locator.mm
index efd272e706ba56b748e4b76b96d76cbd03aa07ac..051851c40e6b721035c6b57ed5b359624d55e525 100644
--- a/chrome/common/mac/app_mode_chrome_locator.mm
+++ b/chrome/common/mac/app_mode_chrome_locator.mm
@@ -80,6 +80,7 @@ bool GetChromeBundleInfo(const base::FilePath& chrome_bundle,
   // on the data in their plist, so encode the framework names here.
   NSDictionary* framework_for_exe = @{
     @"Chromium": @"Chromium",
+    @"Brave": @"Brave",
     @"Google Chrome": @"Google Chrome",
     @"Google Chrome Canary": @"Google Chrome",
   };
diff --git a/chrome/install_static/BUILD.gn b/chrome/install_static/BUILD.gn
index b51284b707dba9393c1edbf7eff413e04bb57d40..358efde9a981136548054f54c7bb1639b7290ec4 100644
--- a/chrome/install_static/BUILD.gn
+++ b/chrome/install_static/BUILD.gn
@@ -42,6 +42,11 @@ static_library("install_static_util") {
       "google_chrome_install_modes.cc",
       "google_chrome_install_modes.h",
     ]
+  } else if (!muon_chromium_build) {
+    sources += [
+      "//electron/install_static/brave_install_modes.cc",
+      "chromium_install_modes.h",
+    ]
   } else {
     sources += [
       "chromium_install_modes.cc",
diff --git a/chrome/installer/util/prebuild/create_string_rc.py b/chrome/installer/util/prebuild/create_string_rc.py
index ce885e05e62af97777314397c79d1f05aa0dc36a..c2b8a35bfdbd6a23ce288b2007dcb8ce7fee8657 100755
--- a/chrome/installer/util/prebuild/create_string_rc.py
+++ b/chrome/installer/util/prebuild/create_string_rc.py
@@ -109,6 +109,9 @@ MODE_SPECIFIC_STRINGS = {
     'chromium': [
       'IDS_APP_SHORTCUTS_SUBDIR_NAME',
     ],
+    'brave': [
+      'IDS_APP_SHORTCUTS_SUBDIR_NAME',
+    ],
   },
   'IDS_INBOUND_MDNS_RULE_DESCRIPTION': {
     'google_chrome': [
@@ -120,6 +123,9 @@ MODE_SPECIFIC_STRINGS = {
     'chromium': [
       'IDS_INBOUND_MDNS_RULE_DESCRIPTION',
     ],
+    'brave': [
+      'IDS_INBOUND_MDNS_RULE_DESCRIPTION',
+    ],
   },
   'IDS_INBOUND_MDNS_RULE_NAME': {
     'google_chrome': [
@@ -131,6 +137,9 @@ MODE_SPECIFIC_STRINGS = {
     'chromium': [
       'IDS_INBOUND_MDNS_RULE_NAME',
     ],
+    'brave': [
+      'IDS_INBOUND_MDNS_RULE_NAME',
+    ],
   },
   # In contrast to the strings above, this one (IDS_PRODUCT_NAME) is used
   # throughout Chrome in mode-independent contexts. Within the installer (the
@@ -146,6 +155,9 @@ MODE_SPECIFIC_STRINGS = {
     'chromium': [
       'IDS_PRODUCT_NAME',
     ],
+    'brave': [
+      'IDS_PRODUCT_NAME',
+    ],
   },
 }
 # Note: Update the test expectations in GetBaseMessageIdForMode.GoogleStringIds
diff --git a/chrome/renderer/BUILD.gn b/chrome/renderer/BUILD.gn
index bed32f454097fda9176a3939780a7eb3b0f4b394..4288280c79163f39b768fb622391f34535549eea 100644
--- a/chrome/renderer/BUILD.gn
+++ b/chrome/renderer/BUILD.gn
@@ -390,6 +390,19 @@ static_library("renderer") {
       "resources/extensions/file_system_provider_custom_bindings.js",
     ]
   }
+
+  if (!muon_chromium_build) {
+    sources -= [
+      "content_settings_observer.cc",
+      "content_settings_observer.h",
+    ]
+
+    if (enable_extensions) {
+      sources -= [
+        "extensions/chrome_extensions_dispatcher_delegate.cc",
+      ]
+    }
+  }
 }
 
 static_library("test_support") {
diff --git a/chrome/renderer/chrome_content_renderer_client.cc b/chrome/renderer/chrome_content_renderer_client.cc
index 51e8e616838f365f3447c388de5b5f6caa004056..b031544cc94e268aed292c3e189aa0656e7d18d5 100644
--- a/chrome/renderer/chrome_content_renderer_client.cc
+++ b/chrome/renderer/chrome_content_renderer_client.cc
@@ -1411,6 +1411,7 @@ ChromeContentRendererClient::CreateBrowserPluginDelegate(
 #endif
 }
 
+#if 0
 void ChromeContentRendererClient::RecordRappor(const std::string& metric,
                                                const std::string& sample) {
   if (!rappor_recorder_) {
@@ -1428,6 +1429,7 @@ void ChromeContentRendererClient::RecordRapporURL(const std::string& metric,
   }
   rappor_recorder_->RecordRapporURL(metric, url);
 }
+#endif  // 0
 
 void ChromeContentRendererClient::AddImageContextMenuProperties(
     const WebURLResponse& response,
diff --git a/chrome/renderer/chrome_content_renderer_client.h b/chrome/renderer/chrome_content_renderer_client.h
index dd11c11af11c2a34f816048d36b27b6fc1cfbcc3..c2c78d3aed330fa08f465e98bbd4bd3e22b4f82b 100644
--- a/chrome/renderer/chrome_content_renderer_client.h
+++ b/chrome/renderer/chrome_content_renderer_client.h
@@ -170,9 +170,9 @@ class ChromeContentRendererClient : public content::ContentRendererClient {
       content::RenderFrame* render_frame,
       const std::string& mime_type,
       const GURL& original_url) override;
-  void RecordRappor(const std::string& metric,
-                    const std::string& sample) override;
-  void RecordRapporURL(const std::string& metric, const GURL& url) override;
+  // void RecordRappor(const std::string& metric,
+  //                   const std::string& sample) override;
+  // void RecordRapporURL(const std::string& metric, const GURL& url) override;
   void AddImageContextMenuProperties(
       const blink::WebURLResponse& response,
       std::map<std::string, std::string>* properties) override;
diff --git a/chrome/renderer/pepper/chrome_renderer_pepper_host_factory.cc b/chrome/renderer/pepper/chrome_renderer_pepper_host_factory.cc
index 12d432198186daf817c0b903af985b05ce17cda2..ddbfdb1765d6f8505c35a70b9465b99d8245a529 100644
--- a/chrome/renderer/pepper/chrome_renderer_pepper_host_factory.cc
+++ b/chrome/renderer/pepper/chrome_renderer_pepper_host_factory.cc
@@ -100,11 +100,11 @@ ChromeRendererPepperHostFactory::CreateResourceHost(
   // time of the corresponding instance's method calls.  Currently these
   // interfaces are available only for whitelisted apps which may not have
   // access to the other private interfaces.
-  switch (message.type()) {
-    case PpapiHostMsg_UMA_Create::ID: {
-      return base::MakeUnique<PepperUMAHost>(host_, instance, resource);
-    }
-  }
+  // switch (message.type()) {
+  //   case PpapiHostMsg_UMA_Create::ID: {
+  //     return base::MakeUnique<PepperUMAHost>(host_, instance, resource);
+  //   }
+  // }
 
   return nullptr;
 }
diff --git a/chrome/test/BUILD.gn b/chrome/test/BUILD.gn
index c090e7af0ba143dd1c99132fb0ae8d26757a4cbc..b89caed97406cd0a378c07141d76d3dbc7f6a6fb 100644
--- a/chrome/test/BUILD.gn
+++ b/chrome/test/BUILD.gn
@@ -837,7 +837,7 @@ if (!is_android) {
       ]
     }
 
-    if (!use_aura || is_chromeos) {
+    if (toolkit_views && (!use_aura || is_chromeos)) {
       sources -= [ "//ui/views/corewm/desktop_capture_controller_unittest.cc" ]
     }
   }
diff --git a/chrome/utility/importer/external_process_importer_bridge.h b/chrome/utility/importer/external_process_importer_bridge.h
index 7e05c4e04f8e61b418d373a73bd8901347df4c76..e7e6d9fa5e0d54c7755fe3a38eca6f70a902411c 100644
--- a/chrome/utility/importer/external_process_importer_bridge.h
+++ b/chrome/utility/importer/external_process_importer_bridge.h
@@ -86,6 +86,7 @@ class ExternalProcessImporterBridge : public ImporterBridge {
 
  private:
   ~ExternalProcessImporterBridge() override;
+  friend class BraveExternalProcessImporterBridge;
 
   // Holds strings needed by the external importer because the resource
   // bundle isn't available to the external process.
diff --git a/chrome/utility/importer/firefox_importer.cc b/chrome/utility/importer/firefox_importer.cc
index 7f8d598bca0243e62f11d5d2ce50d8c25ba88764..72ea878a4e595a2761653dc108d2d9b448f3d965 100644
--- a/chrome/utility/importer/firefox_importer.cc
+++ b/chrome/utility/importer/firefox_importer.cc
@@ -140,14 +140,12 @@ void FirefoxImporter::StartImport(const importer::SourceProfile& source_profile,
   if ((items & importer::PASSWORDS) && !cancelled()) {
     bridge_->NotifyItemStarted(importer::PASSWORDS);
     ImportPasswords();
-    bridge_->NotifyItemEnded(importer::PASSWORDS);
   }
   if ((items & importer::AUTOFILL_FORM_DATA) && !cancelled()) {
     bridge_->NotifyItemStarted(importer::AUTOFILL_FORM_DATA);
     ImportAutofillFormData();
     bridge_->NotifyItemEnded(importer::AUTOFILL_FORM_DATA);
   }
-  bridge_->NotifyEnded();
 }
 
 void FirefoxImporter::ImportHistory() {
diff --git a/chrome/utility/importer/firefox_importer.h b/chrome/utility/importer/firefox_importer.h
index c3f648f165483a2d618438c1a4ef1b35ad6fb10c..3c95e1256465b7b6a009d3bf7619c8f48e2d3d94 100644
--- a/chrome/utility/importer/firefox_importer.h
+++ b/chrome/utility/importer/firefox_importer.h
@@ -43,7 +43,9 @@ class FirefoxImporter : public Importer {
  private:
   using FaviconMap = std::map<int64_t, std::set<GURL>>;
 
+ protected:
   ~FirefoxImporter() override;
+ private:
 
   FRIEND_TEST_ALL_PREFIXES(FirefoxImporterTest, ImportBookmarksV25);
   void ImportBookmarks();
diff --git a/chrome/utility/profile_import_handler.h b/chrome/utility/profile_import_handler.h
index 257467a99132986f56d3ce098515afab24db7941..d8135a059b8621dbe925574b806452211b076a9c 100644
--- a/chrome/utility/profile_import_handler.h
+++ b/chrome/utility/profile_import_handler.h
@@ -38,6 +38,7 @@ class ProfileImportHandler : public chrome::mojom::ProfileImport {
                      chrome::mojom::ProfileImportRequest request);
 
  private:
+  friend class BraveProfileImportHandler;
   // chrome::mojom::ProfileImport:
   void StartImport(const importer::SourceProfile& source_profile,
                    uint16_t items,
diff --git a/chrome_elf/crash/crash_helper.cc b/chrome_elf/crash/crash_helper.cc
index c658fa949b7c5040fd74fa02cfea300b290ad8e7..34eb236d2a4a094d59527e198054083650ed3abe 100644
--- a/chrome_elf/crash/crash_helper.cc
+++ b/chrome_elf/crash/crash_helper.cc
@@ -74,7 +74,9 @@ bool InitializeCrashReporting() {
   g_crash_reports = new std::vector<crash_reporter::Report>;
   g_set_unhandled_exception_filter = new elf_hook::IATHook();
 
+#if defined(MUON_CHROMIUM_BUILD)
   ChromeCrashReporterClient::InitializeCrashReportingForProcess();
+#endif
 
   g_crash_helper_enabled = true;
   return true;
diff --git a/components/crash/content/app/breakpad_linux.cc b/components/crash/content/app/breakpad_linux.cc
index 0d3de65043a0b66fc1d3bc8fee578ae13179f611..93f10e5a838098c125a709b0939bf223897024b0 100644
--- a/components/crash/content/app/breakpad_linux.cc
+++ b/components/crash/content/app/breakpad_linux.cc
@@ -87,8 +87,10 @@ namespace breakpad {
 
 namespace {
 
-#if !defined(OS_CHROMEOS)
+#if !defined(OS_CHROMEOS) && defined(MUON_CHROMIUM_BUILD)
 const char kUploadURL[] = "https://clients2.google.com/cr/report";
+#else
+const char kUploadURL[] = "https://laptop-updates.brave.com/1/crashes";
 #endif
 
 bool g_is_crash_reporter_enabled = false;
@@ -1358,6 +1360,7 @@ void ExecUploadProcessOrTerminate(const BreakpadInfo& info,
     header_content_type,
     post_file,
     kUploadURL,
+    "--quiet",
     "--timeout=10",  // Set a timeout so we don't hang forever.
     "--tries=1",     // Don't retry if the upload fails.
     "-O",  // Output reply to the file descriptor path.
@@ -1411,6 +1414,9 @@ size_t WaitForCrashReportUploadProcess(int fd, size_t bytes_to_read,
 // |buf| should be |expected_len| + 1 characters in size and nullptr terminated.
 bool IsValidCrashReportId(const char* buf, size_t bytes_read,
                           size_t expected_len) {
+#if !defined(MUON_CHROMIUM_BUILD)
+  return my_strcmp(buf, "OK") == 0;
+#endif
   if (bytes_read != expected_len) {
     static const char msg[] = "Unexpected crash report id length\n";
     WriteLog(msg, sizeof(msg) - 1);
@@ -1883,8 +1889,11 @@ void HandleCrashDump(const BreakpadInfo& info) {
       // Helper process.
       if (upload_child > 0) {
         IGNORE_RET(sys_close(fds[1]));  // Close write end of pipe.
-
+#if defined(MUON_CHROMIUM_BUILD)
         const size_t kCrashIdLength = 16;
+#else
+        const size_t kCrashIdLength = 2;
+#endif
         char id_buf[kCrashIdLength + 1];
         size_t bytes_read =
             WaitForCrashReportUploadProcess(fds[0], kCrashIdLength, id_buf);
diff --git a/components/crash/content/app/crashpad_mac.mm b/components/crash/content/app/crashpad_mac.mm
index 3bae07e14c690869515c4ce233988addad12f1c1..3ad9825f406bc10e21579cccb5677651cf780ae5 100644
--- a/components/crash/content/app/crashpad_mac.mm
+++ b/components/crash/content/app/crashpad_mac.mm
@@ -53,6 +53,8 @@ base::FilePath PlatformCrashpadInitialization(bool initial_client,
       // Only allow the possibility of report upload in official builds. This
       // crash server won't have symbols for any other build types.
       std::string url = "https://clients2.google.com/cr/report";
+#elif !defined(MUON_CHROMIUM_BUILD)
+      std::string url = "https://brave-laptop-updates.herokuapp.com/1/crashes";
 #else
       std::string url;
 #endif
diff --git a/components/crash/core/browser/resources/crashes.js b/components/crash/core/browser/resources/crashes.js
index dbd2ae8df59756c61d28091cff70098c897db8f4..84fbc695c817c87deb902d8b6f69d3f1ec762ccb 100644
--- a/components/crash/core/browser/resources/crashes.js
+++ b/components/crash/core/browser/resources/crashes.js
@@ -105,9 +105,9 @@ function updateCrashList(
         // https://bugs.chromium.org/p/monorail/issues/detail?id=1488 is done.
         labels: 'Restrict-View-EditIssue,Stability-Crash,User-Submitted',
       };
-      var href = 'https://code.google.com/p/chromium/issues/entry';
+      var href = 'https://github.com/brave/browser-laptop/issues/new';
       for (var param in params) {
-        href = appendParam(href, param, params[param]);
+        // href = appendParam(href, param, params[param]);
       }
       link.href = href;
       link.target = '_blank';
diff --git a/components/guest_view/browser/guest_view_base.cc b/components/guest_view/browser/guest_view_base.cc
index 27570202e8e5cca632e560fe5b22920aeb2c5742..3ac3b8c7b81c095b3b2264ff18431852de060a1b 100644
--- a/components/guest_view/browser/guest_view_base.cc
+++ b/components/guest_view/browser/guest_view_base.cc
@@ -432,8 +432,13 @@ void GuestViewBase::DidDetach() {
   owner_web_contents()->Send(new GuestViewMsg_GuestDetached(
       element_instance_id_));
   element_instance_id_ = kInstanceIDNone;
-  if (!CanRunInDetachedState())
+  if (!CanRunInDetachedState()) {
     Destroy(true);
+  } else {
+    // Give the derived class an opportunity to perform some actions.
+    DidDetachFromEmbedder();
+  }
+
 }
 
 WebContents* GuestViewBase::GetOwnerWebContents() const {
diff --git a/components/guest_view/browser/guest_view_base.h b/components/guest_view/browser/guest_view_base.h
index 67fdaf0e3730700b991f90f9a34b772450990f5c..aa8646551079b8f9d23a48e6f83c42389009cf91 100644
--- a/components/guest_view/browser/guest_view_base.h
+++ b/components/guest_view/browser/guest_view_base.h
@@ -242,6 +242,9 @@ class GuestViewBase : public content::BrowserPluginGuestDelegate,
   // an opportunity to perform setup actions after attachment.
   virtual void DidAttachToEmbedder() {}
 
+  // This method is called after the guest has been detached from an embedder
+  virtual void DidDetachFromEmbedder() {}
+
   // This method is called after this GuestViewBase has been initiated.
   //
   // This gives the derived class an opportunity to perform additional
diff --git a/components/guest_view/browser/guest_view_manager.cc b/components/guest_view/browser/guest_view_manager.cc
index bc36a92f4ad97e84d65c5213acbb68fc89aae8d9..9567f7f130181a40917751fff899b439b02f9b88 100644
--- a/components/guest_view/browser/guest_view_manager.cc
+++ b/components/guest_view/browser/guest_view_manager.cc
@@ -68,6 +68,9 @@ class GuestViewManager::EmbedderRenderProcessHostObserver
   int id_;
 };
 
+// static
+GuestViewManager* manager_ = nullptr;
+
 GuestViewManager::GuestViewManager(
     content::BrowserContext* context,
     std::unique_ptr<GuestViewManagerDelegate> delegate)
@@ -91,8 +94,9 @@ GuestViewManager* GuestViewManager::CreateWithDelegate(
     } else {
       guest_manager = new GuestViewManager(context, std::move(delegate));
     }
-    context->SetUserData(kGuestViewManagerKeyName,
-                         base::WrapUnique(guest_manager));
+    manager_ = guest_manager;
+    //context->SetUserData(kGuestViewManagerKeyName,
+    //                     base::WrapUnique(guest_manager));
   }
   return guest_manager;
 }
@@ -100,8 +104,9 @@ GuestViewManager* GuestViewManager::CreateWithDelegate(
 // static
 GuestViewManager* GuestViewManager::FromBrowserContext(
     BrowserContext* context) {
-  return static_cast<GuestViewManager*>(context->GetUserData(
-      kGuestViewManagerKeyName));
+  //return static_cast<GuestViewManager*>(context->GetUserData(
+  //    kGuestViewManagerKeyName));
+  return manager_;
 }
 
 // static
diff --git a/components/metrics/metrics_service_accessor.cc b/components/metrics/metrics_service_accessor.cc
index 29b67bd911888a5eedd2d244fbe70aac27899987..918d36ce52cebc97fcf3f952979362c31af70dbd 100644
--- a/components/metrics/metrics_service_accessor.cc
+++ b/components/metrics/metrics_service_accessor.cc
@@ -16,7 +16,7 @@ namespace metrics {
 // static
 bool MetricsServiceAccessor::IsMetricsReportingEnabled(
     PrefService* pref_service) {
-#if defined(GOOGLE_CHROME_BUILD)
+#if defined(GOOGLE_CHROME_BUILD) || !defined(MUON_CHROMIUM_BUILD)
   // In official builds, disable metrics when reporting field trials are
   // forced; otherwise, use the value of the user's preference to determine
   // whether to enable metrics reporting.
diff --git a/components/os_crypt/key_storage_libsecret.cc b/components/os_crypt/key_storage_libsecret.cc
index ea034fd48c08de6f5f755fbffb962390ec8dd7b2..ae6d1fcf40d24c89941e1717c306982555156ca5 100644
--- a/components/os_crypt/key_storage_libsecret.cc
+++ b/components/os_crypt/key_storage_libsecret.cc
@@ -5,6 +5,7 @@
 #include "components/os_crypt/key_storage_libsecret.h"
 
 #include "base/base64.h"
+#include "base/command_line.h"
 #include "base/rand_util.h"
 #include "base/strings/string_number_conversions.h"
 #include "components/os_crypt/libsecret_util_linux.h"
@@ -75,6 +76,12 @@ std::string KeyStorageLibsecret::AddRandomPasswordInLibsecret() {
 std::string KeyStorageLibsecret::GetKey() {
   GError* error = nullptr;
   LibsecretAttributesBuilder attrs;
+  const char *kApplicationName;
+  if (base::CommandLine::ForCurrentProcess()->HasSwitch("import-chrome")) {
+    kApplicationName = "chrome";
+  } else {
+    kApplicationName = ::kApplicationName;
+  }
   attrs.Append("application", kApplicationName);
   GList* search_results = LibsecretLoader::secret_service_search_sync(
       nullptr /* default secret service */, &kKeystoreSchemaV2, attrs.Get(),
diff --git a/components/os_crypt/keychain_password_mac.mm b/components/os_crypt/keychain_password_mac.mm
index 2b38db266f9aa1f4141c8649c021042ede4e5589..ea0387b11f4b00f87596d738c152aa4cc43b2beb 100644
--- a/components/os_crypt/keychain_password_mac.mm
+++ b/components/os_crypt/keychain_password_mac.mm
@@ -7,6 +7,7 @@
 #import <Security/Security.h>
 
 #include "base/base64.h"
+#include "base/command_line.h"
 #include "base/mac/mac_logging.h"
 #include "base/rand_util.h"
 #include "crypto/apple_keychain.h"
@@ -61,6 +62,14 @@ const char KeychainPassword::account_name[] = "Chromium";
 std::string KeychainPassword::GetPassword() const {
   UInt32 password_length = 0;
   void* password_data = NULL;
+  const char *service_name, *account_name;
+  if (base::CommandLine::ForCurrentProcess()->HasSwitch("import-chrome")) {
+    service_name = "Chrome Safe Storage";
+    account_name = "Chrome";
+  } else {
+    service_name = ::KeychainPassword::service_name;
+    account_name = ::KeychainPassword::account_name;
+  }
   OSStatus error = keychain_.FindGenericPassword(
       nullptr, strlen(service_name), service_name, strlen(account_name),
       account_name, &password_length, &password_data, NULL);
diff --git a/components/printing/common/print_messages.h b/components/printing/common/print_messages.h
index 32b0451b60dd100d57ec67a31a94673f2ebd5359..ba98bd0c470bb155177bdd4fd0e268535f0c24d2 100644
--- a/components/printing/common/print_messages.h
+++ b/components/printing/common/print_messages.h
@@ -214,7 +214,6 @@ IPC_STRUCT_TRAITS_BEGIN(PrintMsg_PrintPages_Params)
   IPC_STRUCT_TRAITS_MEMBER(pages)
 IPC_STRUCT_TRAITS_END()
 
-#if BUILDFLAG(ENABLE_PRINT_PREVIEW)
 // Parameters to describe a rendered document.
 IPC_STRUCT_BEGIN(PrintHostMsg_DidPreviewDocument_Params)
   // A shared memory handle to metafile data.
@@ -236,6 +235,7 @@ IPC_STRUCT_BEGIN(PrintHostMsg_DidPreviewDocument_Params)
   IPC_STRUCT_MEMBER(int, preview_request_id)
 IPC_STRUCT_END()
 
+#if BUILDFLAG(ENABLE_PRINT_PREVIEW)
 // Parameters to describe a rendered preview page.
 IPC_STRUCT_BEGIN(PrintHostMsg_DidPreviewPage_Params)
   // A shared memory handle to metafile data for a draft document of the page.
@@ -341,13 +341,11 @@ IPC_MESSAGE_ROUTED1(PrintMsg_PrintingDone,
 // Tells the RenderFrame whether printing is enabled or not.
 IPC_MESSAGE_ROUTED1(PrintMsg_SetPrintingEnabled, bool /* enabled */)
 
-#if BUILDFLAG(ENABLE_PRINT_PREVIEW)
 // Tells the RenderFrame to switch the CSS to print media type, renders every
 // requested pages for print preview using the given |settings|. This gets
 // called multiple times as the user updates settings.
 IPC_MESSAGE_ROUTED1(PrintMsg_PrintPreview,
                     base::DictionaryValue /* settings */)
-#endif
 
 // Messages sent from the renderer to the browser.
 
@@ -431,13 +429,13 @@ IPC_SYNC_MESSAGE_ROUTED2_1(PrintHostMsg_CheckForCancel,
                            int32_t /* PrintPreviewUI ID */,
                            int /* request id */,
                            bool /* print preview cancelled */)
+#endif  // BUILDFLAG(ENABLE_PRINT_PREVIEW)
 
 // Sends back to the browser the complete rendered document (non-draft mode,
 // used for printing) that was requested by a PrintMsg_PrintPreview message.
 // The memory handle in this message is already valid in the browser process.
 IPC_MESSAGE_ROUTED1(PrintHostMsg_MetafileReadyForPrinting,
                     PrintHostMsg_DidPreviewDocument_Params /* params */)
-#endif  // BUILDFLAG(ENABLE_PRINT_PREVIEW)
 
 // This is sent when there are invalid printer settings.
 IPC_MESSAGE_ROUTED0(PrintHostMsg_ShowInvalidPrinterSettingsError)
@@ -446,11 +444,11 @@ IPC_MESSAGE_ROUTED0(PrintHostMsg_ShowInvalidPrinterSettingsError)
 IPC_MESSAGE_ROUTED1(PrintHostMsg_PrintingFailed,
                     int /* document cookie */)
 
-#if BUILDFLAG(ENABLE_PRINT_PREVIEW)
 // Tell the browser print preview failed.
 IPC_MESSAGE_ROUTED1(PrintHostMsg_PrintPreviewFailed,
                     int /* document cookie */)
 
+#if BUILDFLAG(ENABLE_PRINT_PREVIEW)
 // Tell the browser print preview was cancelled.
 IPC_MESSAGE_ROUTED1(PrintHostMsg_PrintPreviewCancelled,
                     int /* document cookie */)
diff --git a/components/printing/renderer/print_web_view_helper.cc b/components/printing/renderer/print_web_view_helper.cc
index 829b2dc1c65e9c2d5226592b3b33c16ee4070b8b..a28adcf4478dddd5089271b7a4755b3bb2e6f80b 100644
--- a/components/printing/renderer/print_web_view_helper.cc
+++ b/components/printing/renderer/print_web_view_helper.cc
@@ -320,7 +320,7 @@ bool PrintingNodeOrPdfFrame(const blink::WebLocalFrame* frame,
   return plugin && plugin->SupportsPaginatedPrint();
 }
 
-#if BUILDFLAG(ENABLE_PRINT_PREVIEW)
+#if 0
 // Returns true if the current destination printer is PRINT_TO_PDF.
 bool IsPrintToPdfRequested(const base::DictionaryValue& job_settings) {
   bool print_to_pdf = false;
@@ -342,7 +342,7 @@ bool PrintingFrameHasPageSizeStyle(blink::WebLocalFrame* frame,
   }
   return frame_has_custom_page_size_style;
 }
-#endif  // BUILDFLAG(ENABLE_PRINT_PREVIEW)
+#endif  // 0
 
 #if BUILDFLAG(ENABLE_PRINTING)
 // Disable scaling when either:
@@ -398,7 +398,7 @@ MarginType GetMarginsForPdf(blink::WebLocalFrame* frame,
 }
 #endif
 
-#if BUILDFLAG(ENABLE_PRINT_PREVIEW)
+#if 0
 bool FitToPageEnabled(const base::DictionaryValue& job_settings) {
   bool fit_to_paper_size = false;
   if (!job_settings.GetBoolean(kSettingFitToPageEnabled, &fit_to_paper_size)) {
@@ -441,7 +441,7 @@ blink::WebPrintScalingOption GetPrintScalingOption(
   }
   return blink::kWebPrintScalingOptionFitToPrintableArea;
 }
-#endif  // BUILDFLAG(ENABLE_PRINT_PREVIEW)
+#endif  // 0
 
 // Helper function to scale and round an integer value with a double valued
 // scaling.
@@ -1028,9 +1028,9 @@ bool PrintWebViewHelper::OnMessageReceived(const IPC::Message& message) {
 #endif
 #if BUILDFLAG(ENABLE_PRINT_PREVIEW)
     IPC_MESSAGE_HANDLER(PrintMsg_InitiatePrintPreview, OnInitiatePrintPreview)
+#endif  // BUILDFLAG(ENABLE_PRINT_PREVIEW)
     IPC_MESSAGE_HANDLER(PrintMsg_PrintPreview, OnPrintPreview)
     IPC_MESSAGE_HANDLER(PrintMsg_PrintingDone, OnPrintingDone)
-#endif  // BUILDFLAG(ENABLE_PRINT_PREVIEW)
     IPC_MESSAGE_HANDLER(PrintMsg_SetPrintingEnabled, OnSetPrintingEnabled)
     IPC_MESSAGE_UNHANDLED(handled = false)
   IPC_END_MESSAGE_MAP()
@@ -1051,8 +1051,8 @@ void PrintWebViewHelper::OnDestruct() {
 
 #if BUILDFLAG(ENABLE_BASIC_PRINTING)
 void PrintWebViewHelper::OnPrintPages() {
-  if (ipc_nesting_level_> 1)
-    return;
+  // if (ipc_nesting_level_> 1)
+  //   return;
 
   blink::WebLocalFrame* frame = render_frame()->GetWebFrame();
 
@@ -1163,8 +1163,8 @@ void PrintWebViewHelper::UpdateFrameMarginsCssInfo(
   ignore_css_margins_ = (margins_type != DEFAULT_MARGINS);
 }
 
-#if BUILDFLAG(ENABLE_PRINT_PREVIEW)
 void PrintWebViewHelper::OnPrintPreview(const base::DictionaryValue& settings) {
+#if 0
   if (ipc_nesting_level_ > 1)
     return;
 
@@ -1172,6 +1172,10 @@ void PrintWebViewHelper::OnPrintPreview(const base::DictionaryValue& settings) {
 
   UMA_HISTOGRAM_ENUMERATION("PrintPreview.PreviewEvent",
                             PREVIEW_EVENT_REQUESTED, PREVIEW_EVENT_MAX);
+#endif  // 0
+
+  blink::WebLocalFrame* frame = render_frame()->GetWebFrame();
+  print_preview_context_.InitWithFrame(frame);
 
   if (!print_preview_context_.source_frame()) {
     DidFinishPrinting(FAIL_PREVIEW);
@@ -1180,6 +1184,7 @@ void PrintWebViewHelper::OnPrintPreview(const base::DictionaryValue& settings) {
 
   if (!UpdatePrintSettings(print_preview_context_.source_frame(),
                            print_preview_context_.source_node(), settings)) {
+#if 0
     if (print_preview_context_.last_error() != PREVIEW_ERROR_BAD_SETTING) {
       Send(new PrintHostMsg_PrintPreviewInvalidPrinterSettings(
           routing_id(), print_pages_params_
@@ -1187,21 +1192,26 @@ void PrintWebViewHelper::OnPrintPreview(const base::DictionaryValue& settings) {
                             : 0));
       notify_browser_of_print_failure_ = false;  // Already sent.
     }
+#endif  // 0
     DidFinishPrinting(FAIL_PREVIEW);
     return;
   }
 
   // Set the options from document if we are previewing a pdf and send a
   // message to browser.
+#if 0
   if (print_pages_params_->params.is_first_request &&
       !print_preview_context_.IsModifiable()) {
     PrintHostMsg_SetOptionsFromDocument_Params options;
     if (SetOptionsFromPdfDocument(&options))
       Send(new PrintHostMsg_SetOptionsFromDocument(routing_id(), options));
   }
+#endif  // 0
 
   is_print_ready_metafile_sent_ = false;
 
+#if 0
+
   // PDF printer device supports alpha blending.
   print_pages_params_->params.supports_alpha_blend = true;
 
@@ -1210,6 +1220,7 @@ void PrintWebViewHelper::OnPrintPreview(const base::DictionaryValue& settings) {
     NOTREACHED();
   }
   print_preview_context_.set_generate_draft_pages(generate_draft_pages);
+#endif  // 0
 
   PrepareFrameForPreviewDocument();
 }
@@ -1217,7 +1228,7 @@ void PrintWebViewHelper::OnPrintPreview(const base::DictionaryValue& settings) {
 void PrintWebViewHelper::PrepareFrameForPreviewDocument() {
   reset_prep_frame_view_ = false;
 
-  if (!print_pages_params_ || CheckForCancel()) {
+  if (!print_pages_params_) {
     DidFinishPrinting(FAIL_PREVIEW);
     return;
   }
@@ -1248,12 +1259,9 @@ void PrintWebViewHelper::OnFramePreparedForPreviewDocument() {
 }
 
 bool PrintWebViewHelper::CreatePreviewDocument() {
-  if (!print_pages_params_ || CheckForCancel())
+  if (!print_pages_params_)
     return false;
 
-  UMA_HISTOGRAM_ENUMERATION("PrintPreview.PreviewEvent",
-                            PREVIEW_EVENT_CREATE_DOCUMENT, PREVIEW_EVENT_MAX);
-
   const PrintMsg_Print_Params& print_params = print_pages_params_->params;
   const std::vector<int>& pages = print_pages_params_->pages;
 
@@ -1262,6 +1270,7 @@ bool PrintWebViewHelper::CreatePreviewDocument() {
     return false;
   }
 
+#if 0
   PageSizeMargins default_page_layout;
   double scale_factor =
       print_params.scale_factor >= kEpsilon ? print_params.scale_factor : 1.0f;
@@ -1327,6 +1336,7 @@ bool PrintWebViewHelper::CreatePreviewDocument() {
   Send(new PrintHostMsg_DidGetPreviewPageCount(routing_id(), params));
   if (CheckForCancel())
     return false;
+#endif  // 0
 
   while (!print_preview_context_.IsFinalPageRendered()) {
     int page_number = print_preview_context_.GetNextPageNumber();
@@ -1334,9 +1344,6 @@ bool PrintWebViewHelper::CreatePreviewDocument() {
     if (!RenderPreviewPage(page_number, print_params))
       return false;
 
-    if (CheckForCancel())
-      return false;
-
     // We must call PrepareFrameAndViewForPrint::FinishPrinting() (by way of
     // print_preview_context_.AllPagesRendered()) before calling
     // FinalizePrintReadyDocument() when printing a PDF because the plugin
@@ -1358,7 +1365,7 @@ bool PrintWebViewHelper::CreatePreviewDocument() {
   return true;
 }
 
-#if !defined(OS_MACOSX) && BUILDFLAG(ENABLE_PRINT_PREVIEW)
+#if !defined(OS_MACOSX)
 bool PrintWebViewHelper::RenderPreviewPage(
     int page_number,
     const PrintMsg_Print_Params& print_params) {
@@ -1387,7 +1394,7 @@ bool PrintWebViewHelper::RenderPreviewPage(
   }
   return PreviewPageRendered(page_number, draft_metafile.get());
 }
-#endif  // !defined(OS_MACOSX) && BUILDFLAG(ENABLE_PRINT_PREVIEW)
+#endif  // !defined(OS_MACOSX)
 
 bool PrintWebViewHelper::FinalizePrintReadyDocument() {
   DCHECK(!is_print_ready_metafile_sent_);
@@ -1417,11 +1424,10 @@ bool PrintWebViewHelper::FinalizePrintReadyDocument() {
   Send(new PrintHostMsg_MetafileReadyForPrinting(routing_id(), preview_params));
   return true;
 }
-#endif  // BUILDFLAG(ENABLE_PRINT_PREVIEW)
 
 void PrintWebViewHelper::OnPrintingDone(bool success) {
-  if (ipc_nesting_level_ > 1)
-    return;
+  // if (ipc_nesting_level_ > 1)
+  //   return;
   notify_browser_of_print_failure_ = false;
   if (!success)
     LOG(ERROR) << "Failure in OnPrintingDone";
@@ -1566,8 +1572,8 @@ void PrintWebViewHelper::DidFinishPrinting(PrintingResult result) {
       }
       break;
 
-#if BUILDFLAG(ENABLE_PRINT_PREVIEW)
     case FAIL_PREVIEW:
+#if 0
       int cookie =
           print_pages_params_ ? print_pages_params_->params.document_cookie : 0;
       if (notify_browser_of_print_failure_) {
@@ -1576,9 +1582,13 @@ void PrintWebViewHelper::DidFinishPrinting(PrintingResult result) {
       } else {
         Send(new PrintHostMsg_PrintPreviewCancelled(routing_id(), cookie));
       }
-      print_preview_context_.Failed(notify_browser_of_print_failure_);
+#endif  // 0
+      LOG(ERROR) << "PREVIEW FAILED.";
+      if (print_pages_params_) {
+        Send(new PrintHostMsg_PrintPreviewFailed(routing_id(),
+                 print_pages_params_->params.document_cookie));
+      }
       break;
-#endif  // BUILDFLAG(ENABLE_PRINT_PREVIEW)
   }
   prep_frame_view_.reset();
   print_pages_params_.reset();
@@ -1742,6 +1752,7 @@ bool PrintWebViewHelper::SetOptionsFromPdfDocument(
   }
   return true;
 }
+#endif  // defined(ENABLE_PRINT_PREVIEW)
 
 bool PrintWebViewHelper::UpdatePrintSettings(
     blink::WebLocalFrame* frame,
@@ -1784,13 +1795,16 @@ bool PrintWebViewHelper::UpdatePrintSettings(
     return false;
   }
 
+#if 0
   if (!job_settings->GetInteger(kPreviewUIID, &settings.params.preview_ui_id)) {
     NOTREACHED();
     print_preview_context_.set_error(PREVIEW_ERROR_BAD_SETTING);
     return false;
   }
+#endif  // 0
 
   if (!print_for_preview_) {
+#if 0
     // Validate expected print preview settings.
     if (!job_settings->GetInteger(kPreviewRequestID,
                                   &settings.params.preview_request_id) ||
@@ -1805,6 +1819,13 @@ bool PrintWebViewHelper::UpdatePrintSettings(
     UpdateFrameMarginsCssInfo(*job_settings);
     settings.params.print_scaling_option = GetPrintScalingOption(
         frame, node, source_is_html, *job_settings, settings.params);
+#endif  // 0
+    job_settings->GetInteger(kPreviewRequestID,
+        &settings.params.preview_request_id);
+    settings.params.print_to_pdf = true;
+    UpdateFrameMarginsCssInfo(*job_settings);
+    settings.params.print_scaling_option =
+       blink::kWebPrintScalingOptionSourceSize;
   }
 
   SetPrintPagesParams(settings);
@@ -1813,12 +1834,9 @@ bool PrintWebViewHelper::UpdatePrintSettings(
     return true;
 
   if (print_for_preview_)
-    Send(new PrintHostMsg_ShowInvalidPrinterSettingsError(routing_id()));
-  else
     print_preview_context_.set_error(PREVIEW_ERROR_INVALID_PRINTER_SETTINGS);
   return false;
 }
-#endif  // BUILDFLAG(ENABLE_PRINT_PREVIEW)
 
 #if BUILDFLAG(ENABLE_BASIC_PRINTING)
 void PrintWebViewHelper::GetPrintSettingsFromUser(
@@ -2070,6 +2088,7 @@ bool PrintWebViewHelper::CheckForCancel() {
     notify_browser_of_print_failure_ = false;
   return cancel;
 }
+#endif  // BUILDFLAG(ENABLE_PRINT_PREVIEW)
 
 bool PrintWebViewHelper::PreviewPageRendered(int page_number,
                                              PdfMetafileSkia* metafile) {
@@ -2091,6 +2110,7 @@ bool PrintWebViewHelper::PreviewPageRendered(int page_number,
     return false;
   }
 
+#if 0
   PrintHostMsg_DidPreviewPage_Params preview_page_params;
   // Get the size of the resulting metafile.
   if (!CopyMetafileDataToSharedMem(
@@ -2105,9 +2125,9 @@ bool PrintWebViewHelper::PreviewPageRendered(int page_number,
       print_pages_params_->params.preview_request_id;
 
   Send(new PrintHostMsg_DidPreviewPage(routing_id(), preview_page_params));
+#endif  // 0
   return true;
 }
-#endif  // BUILDFLAG(ENABLE_PRINT_PREVIEW)
 
 PrintWebViewHelper::PrintPreviewContext::PrintPreviewContext()
     : total_page_count_(0),
diff --git a/components/printing/renderer/print_web_view_helper.h b/components/printing/renderer/print_web_view_helper.h
index c4339d474adba8a96ac7ded22102294404bc2cf5..660df3e8d9747be64f4463b4d54d7d6e76da9fd9 100644
--- a/components/printing/renderer/print_web_view_helper.h
+++ b/components/printing/renderer/print_web_view_helper.h
@@ -153,9 +153,7 @@ class PrintWebViewHelper
     OK,
     FAIL_PRINT_INIT,
     FAIL_PRINT,
-#if BUILDFLAG(ENABLE_PRINT_PREVIEW)
     FAIL_PREVIEW,
-#endif
   };
 
   enum PrintPreviewErrorBuckets {
@@ -193,8 +191,8 @@ class PrintWebViewHelper
 #endif  // BUILDFLAG(ENABLE_BASIC_PRINTING)
 #if BUILDFLAG(ENABLE_PRINT_PREVIEW)
   void OnInitiatePrintPreview(bool has_selection);
-  void OnPrintPreview(const base::DictionaryValue& settings);
 #endif  // BUILDFLAG(ENABLE_PRINT_PREVIEW)
+  void OnPrintPreview(const base::DictionaryValue& settings);
   void OnPrintingDone(bool success);
 
   // Get |page_size| and |content_area| information from
@@ -207,7 +205,6 @@ class PrintWebViewHelper
   // Update |ignore_css_margins_| based on settings.
   void UpdateFrameMarginsCssInfo(const base::DictionaryValue& settings);
 
-#if BUILDFLAG(ENABLE_PRINT_PREVIEW)
   // Prepare frame for creating preview document.
   void PrepareFrameForPreviewDocument();
 
@@ -224,7 +221,6 @@ class PrintWebViewHelper
 
   // Finalize the print ready preview document.
   bool FinalizePrintReadyDocument();
-#endif  // BUILDFLAG(ENABLE_PRINT_PREVIEW)
 
   // Enable/Disable printing.
   void OnSetPrintingEnabled(bool enabled);
@@ -258,6 +254,7 @@ class PrintWebViewHelper
   // Set options for print preset from source PDF document.
   bool SetOptionsFromPdfDocument(
       PrintHostMsg_SetOptionsFromDocument_Params* options);
+#endif  // BUILDFLAG(ENABLE_PRINT_PREVIEW)
 
   // Update the current print settings with new |passed_job_settings|.
   // |passed_job_settings| dictionary contains print job details such as printer
@@ -265,7 +262,6 @@ class PrintWebViewHelper
   bool UpdatePrintSettings(blink::WebLocalFrame* frame,
                            const blink::WebNode& node,
                            const base::DictionaryValue& passed_job_settings);
-#endif  // BUILDFLAG(ENABLE_PRINT_PREVIEW)
 
 #if BUILDFLAG(ENABLE_BASIC_PRINTING)
   // Get final print settings from the user.
@@ -374,6 +370,7 @@ class PrintWebViewHelper
   // WARNING: |this| may be gone after this method returns when |type| is
   // PRINT_PREVIEW_SCRIPTED.
   void RequestPrintPreview(PrintPreviewRequestType type);
+#endif  // BUILDFLAG(ENABLE_PRINT_PREVIEW)
 
   // Checks whether print preview should continue or not.
   // Returns true if canceling, false if continuing.
@@ -385,7 +382,6 @@ class PrintWebViewHelper
   // |metafile| is the rendered page. Otherwise |metafile| is NULL.
   // Returns true if print preview should continue, false on failure.
   bool PreviewPageRendered(int page_number, PdfMetafileSkia* metafile);
-#endif  // BUILDFLAG(ENABLE_PRINT_PREVIEW)
 
   void SetPrintPagesParams(const PrintMsg_PrintPages_Params& settings);
 
diff --git a/components/printing/renderer/print_web_view_helper_mac.mm b/components/printing/renderer/print_web_view_helper_mac.mm
index a00cfa0a95f16e18757bd32b899d7a2eda700993..4608dc001172934658f92a1c6e328f2388bb7b0a 100644
--- a/components/printing/renderer/print_web_view_helper_mac.mm
+++ b/components/printing/renderer/print_web_view_helper_mac.mm
@@ -76,7 +76,6 @@ void PrintWebViewHelper::PrintPagesInternal(
   }
 }
 
-#if BUILDFLAG(ENABLE_PRINT_PREVIEW)
 bool PrintWebViewHelper::RenderPreviewPage(
     int page_number,
     const PrintMsg_Print_Params& print_params) {
@@ -115,7 +114,6 @@ bool PrintWebViewHelper::RenderPreviewPage(
   }
   return PreviewPageRendered(page_number, draft_metafile.get());
 }
-#endif  // BUILDFLAG(ENABLE_PRINT_PREVIEW)
 
 void PrintWebViewHelper::RenderPage(const PrintMsg_Print_Params& params,
                                     int page_number,
diff --git a/content/app/content_main_runner.cc b/content/app/content_main_runner.cc
index a677c9d2c6df30e78614b09d396372db33dff781..47edb643c0507958134edb146ac1b56474f714a7 100644
--- a/content/app/content_main_runner.cc
+++ b/content/app/content_main_runner.cc
@@ -624,7 +624,7 @@ class ContentMainRunnerImpl : public ContentMainRunner {
 
     InitializeV8IfNeeded(command_line, process_type);
 
-#if !defined(OFFICIAL_BUILD)
+#if 0
 #if defined(OS_WIN)
     bool should_enable_stack_dump = !process_type.empty();
 #else
@@ -640,7 +640,7 @@ class ContentMainRunnerImpl : public ContentMainRunner {
             service_manager::switches::kDisableInProcessStackTraces)) {
       base::debug::EnableInProcessStackDumping();
     }
-#endif  // !defined(OFFICIAL_BUILD)
+#endif  // 0
 
     if (delegate_)
       delegate_->PreSandboxStartup();
diff --git a/content/browser/frame_host/render_frame_message_filter.cc b/content/browser/frame_host/render_frame_message_filter.cc
index bbbb37d8917d3987d9ea3514d9cac343dde8faeb..e3200b24a050d1f957896bb77ecf7afe38692ac4 100644
--- a/content/browser/frame_host/render_frame_message_filter.cc
+++ b/content/browser/frame_host/render_frame_message_filter.cc
@@ -481,7 +481,7 @@ void RenderFrameMessageFilter::GetPluginsCallback(
   PluginServiceFilter* filter = PluginServiceImpl::GetInstance()->GetFilter();
   std::vector<WebPluginInfo> plugins;
 
-  int child_process_id = -1;
+  int child_process_id = render_process_id_;
   int routing_id = MSG_ROUTING_NONE;
   // In this loop, copy the WebPluginInfo (and do not use a reference) because
   // the filter might mutate it.
diff --git a/content/browser/renderer_host/input/synthetic_gesture_target_mac.mm b/content/browser/renderer_host/input/synthetic_gesture_target_mac.mm
index e162dd03169f95f4b522650f4f585beef106850c..ca81d874d9c3bad150dde4480c4f97e04cfc48b0 100644
--- a/content/browser/renderer_host/input/synthetic_gesture_target_mac.mm
+++ b/content/browser/renderer_host/input/synthetic_gesture_target_mac.mm
@@ -21,7 +21,7 @@
 // Filled with default values.
 @property(readonly) CGFloat deltaX;
 @property(readonly) CGFloat deltaY;
-@property(readonly) NSEventModifierFlags modifierFlags;
+@property(readonly) NSUInteger modifierFlags;
 @property(readonly) NSTimeInterval timestamp;
 
 @end
diff --git a/content/browser/renderer_host/render_widget_host_view_mac.mm b/content/browser/renderer_host/render_widget_host_view_mac.mm
index faedde4957615f443378c7d1c5f9681de78dbcc8..7507c38ddc19ad1ec752899c37c99e561f72c4e3 100644
--- a/content/browser/renderer_host/render_widget_host_view_mac.mm
+++ b/content/browser/renderer_host/render_widget_host_view_mac.mm
@@ -138,6 +138,12 @@ RenderWidgetHostView* GetRenderWidgetHostViewToUse(
 
 }  // namespace
 
+#ifndef MUON_CHROMIUM_BUILD
+@interface NSWindow (AtomCustomMethods)
+- (BOOL)acceptsFirstMouse;
+- (BOOL)disableAutoHideCursor;
+@end
+#endif
 // These are not documented, so use only after checking -respondsToSelector:.
 @interface NSApplication (UndocumentedSpeechMethods)
 - (void)speakString:(NSString*)string;
@@ -1863,7 +1869,14 @@ void RenderWidgetHostViewMac::OnDisplayMetricsChanged(
 }
 
 - (BOOL)acceptsFirstMouse:(NSEvent*)theEvent {
+#ifdef MUON_CHROMIUM_BUILD
   return [self acceptsMouseEventsWhenInactive];
+#else
+  if ([self.window respondsToSelector:@selector(acceptsFirstMouse)] &&
+      [self.window acceptsFirstMouse])
+    return YES;
+  return NO;
+#endif  // MUON_CHROMIUM_BUILD
 }
 
 - (void)setCloseOnDeactivate:(BOOL)b {
@@ -2037,6 +2050,7 @@ void RenderWidgetHostViewMac::OnDisplayMetricsChanged(
   if (EventIsReservedBySystem(theEvent))
     return NO;
 
+#ifdef MUON_CHROMIUM_BUILD
   // If we return |NO| from this function, cocoa will send the key event to
   // the menu and only if the menu does not process the event to |keyDown:|. We
   // want to send the event to a renderer _before_ sending it to the menu, so
@@ -2050,6 +2064,7 @@ void RenderWidgetHostViewMac::OnDisplayMetricsChanged(
     DCHECK(![[NSApp mainMenu] performKeyEquivalent:theEvent]);
     return NO;
   }
+#endif  // MUON_CHROMIUM_BUILD
 
   // Command key combinations are sent via performKeyEquivalent rather than
   // keyDown:. We just forward this on and if WebCore doesn't want to handle
@@ -2097,8 +2112,10 @@ void RenderWidgetHostViewMac::OnDisplayMetricsChanged(
   if (EventIsReservedBySystem(theEvent))
     return;
 
+#ifdef MUON_CHROMIUM_BUILD
   DCHECK([theEvent type] != NSKeyDown ||
          !equiv == !([theEvent modifierFlags] & NSCommandKeyMask));
+#endif  // MUON_CHROMIUM_BUILD
 
   if ([theEvent type] == NSFlagsChanged) {
     // Ignore NSFlagsChanged events from the NumLock and Fn keys as
@@ -2856,6 +2873,11 @@ void RenderWidgetHostViewMac::OnDisplayMetricsChanged(
 // move) for the given event. Customize here to be more selective about which
 // key presses to autohide on.
 - (BOOL)shouldAutohideCursorForEvent:(NSEvent*)event {
+#ifndef MUON_CHROMIUM_BUILD
+  if ([event.window respondsToSelector:@selector(disableAutoHideCursor)] &&
+      [event.window disableAutoHideCursor])
+    return NO;
+#endif  // MUON_CHROMIUM_BUILD
   return (renderWidgetHostView_->GetTextInputType() !=
               ui::TEXT_INPUT_TYPE_NONE &&
           [event type] == NSKeyDown &&
diff --git a/content/browser/web_contents/web_contents_impl.cc b/content/browser/web_contents/web_contents_impl.cc
index 1dd24658e82fe7c2daa2a2c2a185d001cf3b34c7..1fc43a600a0e59e3699846b5d87f39b9c23f3752 100644
--- a/content/browser/web_contents/web_contents_impl.cc
+++ b/content/browser/web_contents/web_contents_impl.cc
@@ -1656,7 +1656,8 @@ void WebContentsImpl::Init(const WebContents::CreateParams& params) {
   // This is set before initializing the render manager since
   // RenderFrameHostManager::Init calls back into us via its delegate to ask if
   // it should be hidden.
-  should_normally_be_visible_ = !params.initially_hidden;
+  // should_normally_be_visible_ = !params.initially_hidden;
+  should_normally_be_visible_ = true;
 
   // The routing ids must either all be set or all be unset.
   DCHECK((params.routing_id == MSG_ROUTING_NONE &&
@@ -2201,7 +2202,8 @@ void WebContentsImpl::CreateNewWindow(
   DCHECK(!params.opener_suppressed || render_view_route_id == MSG_ROUTING_NONE);
 
   scoped_refptr<SiteInstance> site_instance =
-      params.opener_suppressed && !is_guest
+      // params.opener_suppressed && !is_guest
+      params.opener_suppressed
           ? SiteInstance::CreateForURL(GetBrowserContext(), params.target_url)
           : source_site_instance;
 
diff --git a/content/browser/web_contents/web_contents_view_mac.mm b/content/browser/web_contents/web_contents_view_mac.mm
index ebd0ce35c1c1aeae9462cafc348722bb01224b5e..2a3eebff50502a9a264fb9939a908f9283f22c86 100644
--- a/content/browser/web_contents/web_contents_view_mac.mm
+++ b/content/browser/web_contents/web_contents_view_mac.mm
@@ -593,6 +593,7 @@ void WebContentsViewMac::CloseTab() {
              endedAt:(NSPoint)screenPoint
            operation:(NSDragOperation)operation {
   [dragSource_ endDragAt:screenPoint operation:operation];
+  [dragDest_ endDrag];
 
   // Might as well throw out this object now.
   dragSource_.reset();
diff --git a/content/browser/web_contents/web_drag_dest_mac.h b/content/browser/web_contents/web_drag_dest_mac.h
index da4427bca57814b671c22a900781a77116adc526..56462350c4c9f6590097728a531ec18b36e79ee6 100644
--- a/content/browser/web_contents/web_drag_dest_mac.h
+++ b/content/browser/web_contents/web_drag_dest_mac.h
@@ -92,6 +92,9 @@ GetRenderWidgetHostAtPoint:(const NSPoint&)viewPoint
 // Sets |dragStartProcessID_| and |dragStartViewID_|.
 - (void)setDragStartTrackersForProcess:(int)processID;
 
+// Ends a drag operation
+- (void)endDrag;
+
 // Returns whether |targetRWH| is a valid RenderWidgetHost to be dragging
 // over. This enforces that same-page, cross-site drags are not allowed. See
 // crbug.com/666858.
diff --git a/content/browser/web_contents/web_drag_dest_mac.mm b/content/browser/web_contents/web_drag_dest_mac.mm
index ff2c964a68d0b21d46a3b88b2ea6c3ff4d9d0a07..af043f6d204ee90ec54bc7df401a3bd6519b8541 100644
--- a/content/browser/web_contents/web_drag_dest_mac.mm
+++ b/content/browser/web_contents/web_drag_dest_mac.mm
@@ -347,6 +347,12 @@ GetRenderWidgetHostAtPoint:(const NSPoint&)viewPoint
   dragStartViewID_ = GetRenderViewHostID(webContents_->GetRenderViewHost());
 }
 
+- (void)endDrag {
+  dragStartProcessID_ = content::ChildProcessHost::kInvalidUniqueID;
+  dragStartViewID_ = content::GlobalRoutingID(
+    content::ChildProcessHost::kInvalidUniqueID, MSG_ROUTING_NONE);
+}
+
 - (bool)isValidDragTarget:(content::RenderWidgetHostImpl*)targetRWH {
   return targetRWH->GetProcess()->GetID() == dragStartProcessID_ ||
          GetRenderViewHostID(webContents_->GetRenderViewHost()) !=
diff --git a/content/child/child_process.cc b/content/child/child_process.cc
index d3f557e1bdbd3c67892ac330101d6f8145d1cce6..d294ebf04d2947eab341516db49b37ba3c43f620 100644
--- a/content/child/child_process.cc
+++ b/content/child/child_process.cc
@@ -150,7 +150,7 @@ void ChildProcess::WaitForDebugger(const std::string& label) {
 #if defined(GOOGLE_CHROME_BUILD)
   std::string title = "Google Chrome";
 #else  // CHROMIUM_BUILD
-  std::string title = "Chromium";
+  std::string title = "Brave";
 #endif  // CHROMIUM_BUILD
   title += " ";
   title += label;  // makes attaching to process easier
diff --git a/content/common/dom_storage/dom_storage_map.cc b/content/common/dom_storage/dom_storage_map.cc
index 71368bdd55039ddc76278e7b5706e30517ab8aae..526ce5d8a08002af28762ae54a9280ce3f9d96d7 100644
--- a/content/common/dom_storage/dom_storage_map.cc
+++ b/content/common/dom_storage/dom_storage_map.cc
@@ -66,8 +66,8 @@ bool DOMStorageMap::SetItem(
 
   // Only check quota if the size is increasing, this allows
   // shrinking changes to pre-existing files that are over budget.
-  if (new_item_size > old_item_size && new_bytes_used > quota_)
-    return false;
+  // if (new_item_size > old_item_size && new_bytes_used > quota_)
+  //   return false;
 
   values_[key] = base::NullableString16(value, false);
   ResetKeyIterator();
diff --git a/content/public/app/mojo/content_renderer_manifest.json b/content/public/app/mojo/content_renderer_manifest.json
index 9abc7058e5bc189cb8918ba53a1e59d23473f226..faa4b321fa5732831b05a8f464b72115dacee36f 100644
--- a/content/public/app/mojo/content_renderer_manifest.json
+++ b/content/public/app/mojo/content_renderer_manifest.json
@@ -38,6 +38,7 @@
     "navigation:frame": {
       "provides": {
         "browser": [
+          "autofill::mojom::AutofillAgent",
           "blink::mojom::AppBannerController",
           "blink::mojom::EngagementClient",
           "blink::mojom::InstallationService",
diff --git a/content/public/browser/resource_request_details.cc b/content/public/browser/resource_request_details.cc
index 0e790b688417f077815ab588406bd67738cdb4a3..0b5140a416ff1017c96c44ff223ea61871d7b4b9 100644
--- a/content/public/browser/resource_request_details.cc
+++ b/content/public/browser/resource_request_details.cc
@@ -22,6 +22,10 @@ ResourceRequestDetails::ResourceRequestDetails(const net::URLRequest* request,
       has_certificate(has_certificate),
       ssl_cert_status(request->ssl_info().cert_status),
       socket_address(request->GetSocketAddress()) {
+  if (request->response_info().headers.get())
+    headers = new net::HttpResponseHeaders(
+        request->response_info().headers->raw_headers());
+
   const ResourceRequestInfo* info = ResourceRequestInfo::ForRequest(request);
   resource_type = info->GetResourceType();
   http_response_code =
diff --git a/content/public/browser/resource_request_details.h b/content/public/browser/resource_request_details.h
index e54e2c0fcc8eac6fe637025c3c71f3d6834a4892..d817176d073d8a96fa76b944f6fb198d425b2490 100644
--- a/content/public/browser/resource_request_details.h
+++ b/content/public/browser/resource_request_details.h
@@ -10,6 +10,7 @@
 #include "content/public/common/resource_type.h"
 #include "net/base/host_port_pair.h"
 #include "net/cert/cert_status_flags.h"
+#include "net/http/http_response_headers.h"
 #include "net/url_request/url_request_status.h"
 #include "url/gurl.h"
 
@@ -41,6 +42,7 @@ struct ResourceRequestDetails {
   // HTTP response code. See HttpResponseHeaders::response_code().
   // -1 if there are no response headers yet.
   int http_response_code;
+  scoped_refptr<net::HttpResponseHeaders> headers;
 };
 
 // Details about a redirection of a resource request.
diff --git a/content/renderer/browser_plugin/browser_plugin.cc b/content/renderer/browser_plugin/browser_plugin.cc
index 712980760b360728f432a865855a3813c0a0d9e3..991465651f18125ab73f891f4cb4415623d13de6 100644
--- a/content/renderer/browser_plugin/browser_plugin.cc
+++ b/content/renderer/browser_plugin/browser_plugin.cc
@@ -461,8 +461,6 @@ blink::WebInputEventResult BrowserPlugin::HandleInputEvent(
 
   if (blink::WebInputEvent::IsGestureEventType(event.GetType())) {
     auto gesture_event = static_cast<const blink::WebGestureEvent&>(event);
-    DCHECK(blink::WebInputEvent::kGestureTapDown == event.GetType() ||
-           gesture_event.resending_plugin_id == browser_plugin_instance_id_);
 
     // We shouldn't be forwarding GestureEvents to the Guest anymore. Indicate
     // we handled this only if it's a non-resent event.
diff --git a/content/renderer/render_thread_impl.cc b/content/renderer/render_thread_impl.cc
index 574acb32ff2ae46bb928656e2400e9b2b06f730c..c7988f64f2ccf162c69ac1b72f016e2f81b691c1 100644
--- a/content/renderer/render_thread_impl.cc
+++ b/content/renderer/render_thread_impl.cc
@@ -795,12 +795,12 @@ void RenderThreadImpl::Init(
       switches::kEnableGpuMemoryBufferCompositorResources);
 
 #if defined(OS_MACOSX)
-  base::ScopedCFTypeRef<CFStringRef> key(
-      base::SysUTF8ToCFStringRef("NSScrollViewRubberbanding"));
-  Boolean key_exists = false;
-  Boolean value = CFPreferencesGetAppBooleanValue(
-      key, kCFPreferencesCurrentApplication, &key_exists);
-  is_elastic_overscroll_enabled_ = !key_exists || value;
+  // base::ScopedCFTypeRef<CFStringRef> key(
+  //     base::SysUTF8ToCFStringRef("NSScrollViewRubberbanding"));
+  // Boolean key_exists = false;
+  // Boolean value = CFPreferencesGetAppBooleanValue(
+  //     key, kCFPreferencesCurrentApplication, &key_exists);
+  // is_elastic_overscroll_enabled_ = !key_exists || value;
 #else
   is_elastic_overscroll_enabled_ = false;
 #endif
diff --git a/extensions/browser/guest_view/extensions_guest_view_manager_delegate.cc b/extensions/browser/guest_view/extensions_guest_view_manager_delegate.cc
index 061480b5acd6431aa9abb7e02c98ebe5e881d7f9..f8288fa42f148651fd729dbce111c6c4151fe2b0 100644
--- a/extensions/browser/guest_view/extensions_guest_view_manager_delegate.cc
+++ b/extensions/browser/guest_view/extensions_guest_view_manager_delegate.cc
@@ -53,8 +53,10 @@ void ExtensionsGuestViewManagerDelegate::DispatchEvent(
   // extensions::events::HistogramValue as an argument.
   events::HistogramValue histogram_value =
       guest_view_events::GetEventHistogramValue(event_name);
+#ifdef MUON_CHROMIUM_BUILD
   DCHECK_NE(events::UNKNOWN, histogram_value) << "Event " << event_name
                                               << " must have a histogram value";
+#endif
 
   content::WebContents* owner = guest->owner_web_contents();
   if (!owner)
diff --git a/extensions/common/BUILD.gn b/extensions/common/BUILD.gn
index ef92f6776954883ab919722aad195e84eec383ad..32f2023a60654c2cb2bd3190eb135d0928749ac8 100644
--- a/extensions/common/BUILD.gn
+++ b/extensions/common/BUILD.gn
@@ -288,6 +288,7 @@ if (enable_extensions) {
       "//chrome:resources",
       "//components/crx_file",
       "//components/url_matcher",
+      "//content/public/common",
       "//crypto",
       "//device/bluetooth",
       "//device/usb",
diff --git a/extensions/common/api/_api_features.json b/extensions/common/api/_api_features.json
index 6227d47f8dc056a2bada2b166dcee1b4d86d9237..26bd7fdb704890c55d0c593d9e7a9002e3a8bfe1 100644
--- a/extensions/common/api/_api_features.json
+++ b/extensions/common/api/_api_features.json
@@ -177,7 +177,10 @@
     {
       "internal": true,
       "channel": "stable",
-      "contexts": ["blessed_extension"]
+      "contexts": ["blessed_extension", "webui"],
+      "matches": [
+        "chrome://brave/*"
+      ]
     }, {
       "internal": true,
       "channel": "stable",
@@ -512,6 +515,7 @@
     "internal": true,
     "contexts": ["webui"],
     "matches": [
+      "chrome://brave/*",
       "chrome://chrome-signin/*",
       "chrome://media-router/*",
       "chrome://oobe/*"
@@ -530,6 +534,13 @@
       "chrome://media-router/*",
       "chrome://oobe/*"
     ]
+  }, {
+    "internal": true,
+    "channel": "stable",
+    "contexts": ["webui"],
+    "matches": [
+      "chrome://brave/*"
+    ]
   }],
   "webViewRequest": [{
     "dependencies": ["permission:webview"],
@@ -538,6 +549,7 @@
     "channel": "stable",
     "contexts": ["webui"],
     "matches": [
+      "chrome://brave/*",
       "chrome://chrome-signin/*",
       "chrome://media-router/*",
       "chrome://oobe/*"
diff --git a/extensions/renderer/module_system.cc b/extensions/renderer/module_system.cc
index 7fba82b3c1e816eb03385209f780eefc57671356..128bbbaef3820c7a16d1f5e326c1d9ab7a7aa27f 100644
--- a/extensions/renderer/module_system.cc
+++ b/extensions/renderer/module_system.cc
@@ -452,11 +452,13 @@ void ModuleSystem::LazyFieldGetterInner(
   // time, it means something went wrong. Bail out early rather than going
   // through the initialization process again (since bindings may not expect to
   // run multiple times).
+#ifdef MUON_CHROMIUM_BUILD
+  // broken commit in upstream see https://codereview.chromium.org/2835643004#msg23
   if (!module_system->loaded_modules_.insert(name).second) {
     Warn(isolate, "Previous API instantiation failed.");
     return;
   }
-
+#endif
   // Switch to our v8 context because we need functions created while running
   // the require()d module to belong to our context, not the current one.
   v8::Context::Scope context_scope(context);
diff --git a/extensions/renderer/resources/guest_view/guest_view_container.js b/extensions/renderer/resources/guest_view/guest_view_container.js
index 2ef77f4f6359618be7b37d0804a77dd4883dbc06..47f9059b1819810fc4284a9d63aae1d8c658431f 100644
--- a/extensions/renderer/resources/guest_view/guest_view_container.js
+++ b/extensions/renderer/resources/guest_view/guest_view_container.js
@@ -26,6 +26,7 @@ function GuestViewContainer(element, viewType) {
   privates(this).internalElement = this.createInternalElement$();
   this.setupFocusPropagation();
   var shadowRoot = this.element.createShadowRoot();
+  shadowRoot.innerHTML = '<style>:host { display: flex; }</style>'
   shadowRoot.appendChild(privates(this).internalElement);
 
   GuestViewInternalNatives.RegisterView(this.viewInstanceId, this, viewType);
@@ -209,8 +210,9 @@ function registerInternalElement(viewType) {
   proto.createdCallback = function() {
     this.setAttribute('type', 'application/browser-plugin');
     this.setAttribute('id', 'browser-plugin-' + IdGenerator.GetNextId());
-    this.style.width = '100%';
-    this.style.height = '100%';
+    // this.style.width = '100%';
+    // this.style.height = '100%';
+    this.style.flex = '1 1 auto';
   };
 
   proto.attachedCallback = function() {
diff --git a/gin/object_template_builder.h b/gin/object_template_builder.h
index bf0ece1e723ba1a0644961cfd3a01ce3c14c892a..5e7d3dbb9da51a5abb0447bc04c90c9bee6b9324 100644
--- a/gin/object_template_builder.h
+++ b/gin/object_template_builder.h
@@ -26,7 +26,7 @@ template<typename T, typename Enable = void>
 struct CallbackTraits {
   static v8::Local<v8::FunctionTemplate> CreateTemplate(v8::Isolate* isolate,
                                                          T callback) {
-    return CreateFunctionTemplate(isolate, base::Bind(callback));
+    return gin::CreateFunctionTemplate(isolate, base::Bind(callback));
   }
   static void SetAsFunctionHandler(v8::Isolate* isolate,
                                    v8::Local<v8::ObjectTemplate> tmpl,
@@ -40,7 +40,7 @@ template<typename T>
 struct CallbackTraits<base::Callback<T> > {
   static v8::Local<v8::FunctionTemplate> CreateTemplate(
       v8::Isolate* isolate, const base::Callback<T>& callback) {
-    return CreateFunctionTemplate(isolate, callback);
+    return gin::CreateFunctionTemplate(isolate, callback);
   }
   static void SetAsFunctionHandler(v8::Isolate* isolate,
                                    v8::Local<v8::ObjectTemplate> tmpl,
@@ -59,7 +59,7 @@ struct CallbackTraits<
     typename std::enable_if<std::is_member_function_pointer<T>::value>::type> {
   static v8::Local<v8::FunctionTemplate> CreateTemplate(v8::Isolate* isolate,
                                                          T callback) {
-    return CreateFunctionTemplate(isolate, base::Bind(callback),
+    return gin::CreateFunctionTemplate(isolate, base::Bind(callback),
                                   HolderIsFirstArgument);
   }
   static void SetAsFunctionHandler(v8::Isolate* isolate,
diff --git a/net/BUILD.gn b/net/BUILD.gn
index 62145ac928a694a37cb9fe0e3f48e6cd3ea0b434..f70a0404af0024118cdbdd6a15cf76f41ef8179f 100644
--- a/net/BUILD.gn
+++ b/net/BUILD.gn
@@ -65,7 +65,7 @@ config("net_internal_config") {
   if (use_kerberos) {
     defines += [ "USE_KERBEROS" ]
     if (is_android) {
-      include_dirs = [ "/usr/include/kerberosV" ]
+      include_dirs += [ "/usr/include/kerberosV" ]
     }
   }
 
@@ -1737,6 +1737,8 @@ component("net") {
       "//third_party/zlib",
     ]
 
+    include_dirs = [ "$root_gen_dir" ]
+
     if (!use_kerberos) {
       sources -= [
         "http/http_auth_handler_negotiate.cc",
diff --git a/net/http/http_util.cc b/net/http/http_util.cc
index 95ba606a7e0fa239a9c8c62f19591ec6bb39097a..b4fece0421b282f4042250108426eb502ff9b4c9 100644
--- a/net/http/http_util.cc
+++ b/net/http/http_util.cc
@@ -58,8 +58,8 @@ static size_t FindStringEnd(const std::string& line, size_t start, char delim) {
 // static
 std::string HttpUtil::SpecForRequest(const GURL& url) {
   // We may get ftp scheme when fetching ftp resources through proxy.
-  DCHECK(url.is_valid() && (url.SchemeIsHTTPOrHTTPS() || url.SchemeIs("ftp") ||
-                            url.SchemeIsWSOrWSS()));
+  // DCHECK(url.is_valid() && (url.SchemeIsHTTPOrHTTPS() || url.SchemeIs("ftp") ||
+  //                           url.SchemeIsWSOrWSS()));
   return SimplifyUrlForRequest(url).spec();
 }
 
diff --git a/net/url_request/url_request_job.h b/net/url_request/url_request_job.h
index 2341999ae5493b1e205343963b41d8cbc68549de..25552307f59d70dbc9484a0edb241c21e0b67ebd 100644
--- a/net/url_request/url_request_job.h
+++ b/net/url_request/url_request_job.h
@@ -269,6 +269,7 @@ class NET_EXPORT URLRequestJob : public base::PowerObserver {
   void OnCallToDelegate();
   void OnCallToDelegateComplete();
 
+public:
   // Called to read raw (pre-filtered) data from this Job. Reads at most
   // |buf_size| bytes into |buf|.
   // Possible return values:
diff --git a/third_party/WebKit/Source/core/editing/EditingBehavior.h b/third_party/WebKit/Source/core/editing/EditingBehavior.h
index 5374bf1652af381a1efc0cdfc96b56b883b716a0..b157bc09a570ca3dd492ffcfb03417e32ffe30bc 100644
--- a/third_party/WebKit/Source/core/editing/EditingBehavior.h
+++ b/third_party/WebKit/Source/core/editing/EditingBehavior.h
@@ -42,7 +42,7 @@ class CORE_EXPORT EditingBehavior {
   // area, maintain the horizontal position on Windows and Android but extend it
   // to the boundary of the editable content on Mac and Linux.
   bool ShouldMoveCaretToHorizontalBoundaryWhenPastTopOrBottom() const {
-    return type_ != kEditingWindowsBehavior && type_ != kEditingAndroidBehavior;
+    return false;
   }
 
   bool ShouldSelectReplacement() const {
diff --git a/third_party/WebKit/Source/core/html/HTMLMediaElement.cpp b/third_party/WebKit/Source/core/html/HTMLMediaElement.cpp
index 4586eb16224502b5ac6f3bfe50d7d5072b708562..ac8b4793be3b631023a16396a35ed7983e0916ba 100644
--- a/third_party/WebKit/Source/core/html/HTMLMediaElement.cpp
+++ b/third_party/WebKit/Source/core/html/HTMLMediaElement.cpp
@@ -2495,7 +2495,7 @@ void HTMLMediaElement::setMuted(bool muted) {
   if (!muted_ && !autoplay_policy_->RequestAutoplayUnmute())
     pause();
 
-  // This is called after the volumechange event to make sure isAutoplayingMuted
+  // This is called after the volumechange event to make sure IsAutoplayingMuted
   // returns the right value when webMediaPlayer receives the volume update.
   if (GetWebMediaPlayer())
     GetWebMediaPlayer()->SetVolume(EffectiveMediaVolume());
diff --git a/third_party/WebKit/Source/core/html/media/AutoplayPolicy.cpp b/third_party/WebKit/Source/core/html/media/AutoplayPolicy.cpp
index b068dd92e3ba16c6d3de7e19801bc0a6032726ba..3c8a90617b9a8c0d25ba48a2a60c35805977bc82 100644
--- a/third_party/WebKit/Source/core/html/media/AutoplayPolicy.cpp
+++ b/third_party/WebKit/Source/core/html/media/AutoplayPolicy.cpp
@@ -231,6 +231,10 @@ void AutoplayPolicy::UnlockUserGesture() {
 }
 
 bool AutoplayPolicy::IsGestureNeededForPlayback() const {
+  // MUON(darkdh): check autoplay setting
+  if (!IsAutoplayAllowedPerSettings()) {
+    return true;
+  }
   if (!locked_pending_user_gesture_)
     return false;
 
diff --git a/third_party/WebKit/public/platform/WebTouchPoint.h b/third_party/WebKit/public/platform/WebTouchPoint.h
index d26611fd06608eca590cff13f7b6006a82146475..6421edec6f2f2f55575a7b259dea80917fbbac9b 100644
--- a/third_party/WebKit/public/platform/WebTouchPoint.h
+++ b/third_party/WebKit/public/platform/WebTouchPoint.h
@@ -31,9 +31,9 @@
 #ifndef WebTouchPoint_h
 #define WebTouchPoint_h
 
-#include "public/platform/WebCommon.h"
-#include "public/platform/WebFloatPoint.h"
-#include "public/platform/WebPointerProperties.h"
+#include "WebCommon.h"
+#include "WebFloatPoint.h"
+#include "WebPointerProperties.h"
 
 namespace blink {
 
diff --git a/third_party/boringssl/BUILD.generated.gni b/third_party/boringssl/BUILD.generated.gni
index e3eb76a3a45e2771da729a263bf0823c546a7eec..7b3cf48983ab81c76b84f09c21c884e2995ea037 100644
--- a/third_party/boringssl/BUILD.generated.gni
+++ b/third_party/boringssl/BUILD.generated.gni
@@ -372,6 +372,24 @@ ssl_sources = [
   "src/ssl/tls_record.c",
 ]
 
+decrepit_sources = [
+  "src/decrepit/bio/base64_bio.c",
+  "src/decrepit/blowfish/blowfish.c",
+  "src/decrepit/cast/cast.c",
+  "src/decrepit/cast/cast_tables.c",
+  "src/decrepit/des/cfb64ede.c",
+  "src/decrepit/dh/dh_decrepit.c",
+  "src/decrepit/dsa/dsa_decrepit.c",
+  "src/decrepit/evp/dss1.c",
+  "src/decrepit/evp/evp_do_all.c",
+  "src/decrepit/rc4/rc4_decrepit.c",
+  "src/decrepit/ripemd/ripemd.c",
+  "src/decrepit/rsa/rsa_decrepit.c",
+  "src/decrepit/ssl/ssl_decrepit.c",
+  "src/decrepit/x509/x509_decrepit.c",
+  "src/decrepit/xts/xts.c",
+]
+
 crypto_sources_linux_aarch64 = [
   "linux-aarch64/crypto/chacha/chacha-armv8.S",
   "linux-aarch64/crypto/fipsmodule/aesv8-armx64.S",
diff --git a/third_party/boringssl/BUILD.gn b/third_party/boringssl/BUILD.gn
index ef900bce6a8ae8500611ca76c1898d71c349f081..bde0cd50d24289981e99d47a5f3fc5524dc4b2ef 100644
--- a/third_party/boringssl/BUILD.gn
+++ b/third_party/boringssl/BUILD.gn
@@ -41,7 +41,7 @@ config("no_asm_config") {
   defines = [ "OPENSSL_NO_ASM" ]
 }
 
-all_sources = crypto_sources + ssl_sources
+all_sources = crypto_sources + ssl_sources + decrepit_sources
 
 # Windows' assembly is built with Yasm. The other platforms use the platform
 # assembler.
diff --git a/third_party/crashpad/crashpad/handler/crash_report_upload_thread.cc b/third_party/crashpad/crashpad/handler/crash_report_upload_thread.cc
index d77cdbadc482ab5bee13e1026869bc9f52c415a3..561ac592c7ac0498f6d82a61d8fe621281f760a3 100644
--- a/third_party/crashpad/crashpad/handler/crash_report_upload_thread.cc
+++ b/third_party/crashpad/crashpad/handler/crash_report_upload_thread.cc
@@ -268,7 +268,11 @@ void CrashReportUploadThread::ProcessPendingReport(
         // If the most recent upload attempt occurred within the past hour,
         // don’t attempt to upload the new report. If it happened longer ago,
         // attempt to upload the report.
+#if defined(MUON_CHROMIUM_BUILD)
         const int kUploadAttemptIntervalSeconds = 60 * 60;  // 1 hour
+#else
+        const int kUploadAttemptIntervalSeconds = 1 * 60;  // 1 min
+#endif
         if (now - last_upload_attempt_time < kUploadAttemptIntervalSeconds) {
           database_->SkipReportUpload(
               report.uuid, Metrics::CrashSkippedReason::kUploadThrottled);
diff --git a/third_party/widevine/cdm/BUILD.gn b/third_party/widevine/cdm/BUILD.gn
index 9e744b9940e2c79366fae21f5652ee0fce830637..143385a2831ca5221a68b99bba65dc2927a241ac 100644
--- a/third_party/widevine/cdm/BUILD.gn
+++ b/third_party/widevine/cdm/BUILD.gn
@@ -113,9 +113,10 @@ if (widevine_cdm_binary_files != []) {
     if (is_mac) {
       ldflags = [
         # Not to strip important symbols by -Wl,-dead_strip.
-        "-Wl,-exported_symbol,_PPP_GetInterface",
-        "-Wl,-exported_symbol,_PPP_InitializeModule",
-        "-Wl,-exported_symbol,_PPP_ShutdownModule",
+        # "-Wl,-exported_symbol,_PPP_GetInterface",
+        # "-Wl,-exported_symbol,_PPP_InitializeModule",
+        # "-Wl,-exported_symbol,_PPP_ShutdownModule",
+        "-Wl,-install_name,@loader_path/libwidevinecdm.dylib",
       ]
       #TODO(jrummell) Mac: 'DYLIB_INSTALL_NAME_BASE': '@loader_path',
     } else if (is_posix && !is_mac) {
